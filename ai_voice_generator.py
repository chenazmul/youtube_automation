import os
import re
import math
import azure.cognitiveservices.speech as speechsdk
from pydub import AudioSegment

def sanitize_text_for_ssml(text):
    """SSML ржПрж░ ржЬржирзНржп ржЯрзЗржХрзНрж╕ржЯ рж╕рзЗржирж┐ржЯрж╛ржЗржЬ ржХрж░рзЗ"""
    # рж╕рж╛ржзрж╛рж░ржг HTML ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ ржПрж╕рзНржХрзЗржк
    text = text.replace("&", "&amp;")
    text = text.replace("<", "&lt;")
    text = text.replace(">", "&gt;")
    text = text.replace('"', "&quot;")
    text = text.replace("'", "&apos;")
    
    # ржЕржирзНржпрж╛ржирзНржп рж╕ржорзНржнрж╛ржмрзНржп рж╕ржорж╕рзНржпрж╛ржпрзБржХрзНржд ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ ржкрж░рж┐рж╖рзНржХрж╛рж░
    text = re.sub(r'[\u0000-\u001F\u007F-\u009F]', '', text)
    
    return text

def transcribe_and_generate_ai_voice(transcript_text, title, temp_folder, chunk_size=4000):
    """
    ржЯрзНрж░рж╛ржирзНрж╕ржХрзНрж░рж┐ржкрзНржЯ ржерзЗржХрзЗ AI ржнржпрж╝рзЗрж╕ рждрзИрж░рж┐ ржХрж░рзЗред ржмржбрж╝ ржЯрзЗржХрзНрж╕ржЯржЧрзБрж▓рзЛ ржЫрзЛржЯ ржЫрзЛржЯ ржЪрж╛ржЩрзНржХрзЗ ржнрж╛ржЧ ржХрж░рзЗ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рзЗред
    
    Parameters:
    - transcript_text: Whisper ржерзЗржХрзЗ ржкрж╛ржУржпрж╝рж╛ ржЯрзНрж░рж╛ржирзНрж╕ржХрзНрж░рж┐ржкрзНржЯ
    - title: ржЖржЙржЯржкрзБржЯ ржлрж╛ржЗрж▓рзЗрж░ ржЬржирзНржп рж╢рж┐рж░рзЛржирж╛ржо
    - temp_folder: ржЯрзЗржорзНржкрзЛрж░рж╛рж░рж┐ ржлрж╛ржЗрж▓ рж╕ржВрж░ржХрзНрж╖ржгрзЗрж░ ржЬржирзНржп ржлрзЛрж▓рзНржбрж╛рж░
    - chunk_size: ржкрзНрж░рждрж┐ ржЪрж╛ржЩрзНржХрзЗ рж╕рж░рзНржмрж╛ржзрж┐ржХ ржЕржХрзНрж╖рж░ рж╕ржВржЦрзНржпрж╛ (Microsoft-ржПрж░ TTS ржПрж░ ржЬржирзНржп 10,000 рж╕рж░рзНржмрж╛ржзрж┐ржХ)
    
    Returns:
    - output_audio_path: рж╕ржорзНржкрзВрж░рзНржг AI ржнржпрж╝рзЗрж╕ ржорж┐рж╢рзНрж░рж┐ржд ржЕржбрж┐ржУ ржлрж╛ржЗрж▓рзЗрж░ ржкрж╛рже
    """
    print(f"ЁЯОЩя╕П Generating AI voice for: {title}")
    
    # Azure рж╕рзНржкрж┐ржЪ рж╕рж╛рж░рзНржнрж┐рж╕ ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи
    speech_key = "CQT0xwEFxCRUFFpfqFNp72Fji4jyJAwNUljqTqtirXXSD4bsvVDCJQQJ99BAACYeBjFXJ3w3AAAYACOGS55e"
    service_region = "eastus"

    speech_config = speechsdk.SpeechConfig(subscription=speech_key, region=service_region)
    speech_config.speech_synthesis_voice_name = "en-US-ChristopherNeural"  # ржкрзБрж░рзБрж╖ ржХржгрзНржа
    # ржЕржирзНржпрж╛ржирзНржп ржнрж╛рж▓ ржХржгрзНржарзЗрж░ ржЙржжрж╛рж╣рж░ржг:
    # - "en-US-JasonNeural" (ржкрзБрж░рзБрж╖, ржкрж░рж┐рж╖рзНржХрж╛рж░, ржкрзНрж░ржлрзЗрж╢ржирж╛рж▓)
    # - "en-US-GuyNeural" (ржкрзБрж░рзБрж╖, ржЙрж╖рзНржг, ржкрзНрж░рж╛ржХрзГрждрж┐ржХ)
    # - "en-US-SaraNeural" (ржорж╣рж┐рж▓рж╛, ржкрж░рж┐рж╖рзНржХрж╛рж░, ржкрзНрж░ржлрзЗрж╢ржирж╛рж▓)
    # - "en-US-JennyNeural" (ржорж╣рж┐рж▓рж╛, ржЙрж╖рзНржг, ржкрзНрж░рж╛ржХрзГрждрж┐ржХ)
    
    speech_config.set_speech_synthesis_output_format(speechsdk.SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3)
    
    # ржЪрж╛ржЩрзНржХ ржлрзЛрж▓рзНржбрж╛рж░ рждрзИрж░рж┐
    chunk_folder = os.path.join(temp_folder, f"{title}_ai_voice_chunks")
    os.makedirs(chunk_folder, exist_ok=True)
    
    # ржЯрзЗржХрзНрж╕ржЯ ржЪрж╛ржЩрзНржХ рждрзИрж░рж┐ ржХрж░рзБржи
    text = sanitize_text_for_ssml(transcript_text)
    
    # рж╕рзЗржирзНржЯрзЗржирзНрж╕ ржжрзНржмрж╛рж░рж╛ ржнрж╛ржЧ ржХрж░рзБржи ржпрж╛рждрзЗ ржорж╛ржирж╕ржорзНржоржд ржмрзНрж░рзЗржХ ржкржпрж╝рзЗржирзНржЯрзЗ ржЪрж╛ржЩрзНржХ ржХрж░рж╛ ржпрж╛ржпрж╝
    sentences = re.split(r'(?<=[.!?])\s+', text)
    
    chunks = []
    current_chunk = ""
    
    for sentence in sentences:
        if len(current_chunk) + len(sentence) < chunk_size:
            current_chunk += " " + sentence if current_chunk else sentence
        else:
            if current_chunk:
                chunks.append(current_chunk.strip())
            current_chunk = sentence
    
    if current_chunk:
        chunks.append(current_chunk.strip())
    
    print(f"ЁЯФ╣ Text split into {len(chunks)} chunks for processing")
    
    # ржкрзНрж░рждрж┐ржЯрж┐ ржЪрж╛ржЩрзНржХ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рзЗ AI ржнржпрж╝рзЗрж╕ рждрзИрж░рж┐ ржХрж░рзБржи
    chunk_audio_files = []
    
    for i, chunk_text in enumerate(chunks):
        chunk_filename = os.path.join(chunk_folder, f"chunk_{i}.mp3")
        
        # SSML рждрзИрж░рж┐
        ssml_string = f"""
        <speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' 
               xmlns:mstts='https://www.w3.org/2001/mstts' xml:lang='en-US'>
            <voice name='{speech_config.speech_synthesis_voice_name}'>
                <mstts:express-as style='excited'>
                    {chunk_text}
                </mstts:express-as>
            </voice>
        </speak>
        """
        
        # ржЕржбрж┐ржУ ржХржиржлрж┐ржЧ
        audio_config = speechsdk.audio.AudioOutputConfig(filename=chunk_filename)
        synthesizer = speechsdk.SpeechSynthesizer(speech_config=speech_config, audio_config=audio_config)
        
        # рж╕рж┐ржиржерзЗрж╕рж╛ржЗржЬ
        try:
            print(f"ЁЯФ╣ Synthesizing chunk {i+1}/{len(chunks)}...")
            result = synthesizer.speak_ssml_async(ssml_string).get()
            
            if result.reason == speechsdk.ResultReason.SynthesizingAudioCompleted:
                print(f"тЬЕ Chunk {i+1} synthesized successfully: {chunk_filename}")
                chunk_audio_files.append(chunk_filename)
            else:
                print(f"тЭМ Error synthesizing chunk {i+1}: {result.reason}")
                # ржпржжрж┐ ржПржХржЯрж┐ ржЪрж╛ржЩрзНржХ ржмрзНржпрж░рзНрже рж╣ржпрж╝, ржЕржирзНржпржЧрзБрж▓рзЛ ржирж┐ржпрж╝рзЗ рждржмрзБржУ ржЪрж╛рж▓рж┐ржпрж╝рзЗ ржпрж╛ржи
        except Exception as e:
            print(f"тЭМ Exception in AI Voice Generation for chunk {i+1}: {e}")
    
    if not chunk_audio_files:
        print("тЭМ No audio chunks were successfully synthesized")
        return None
    
    # рж╕ржм ржЕржбрж┐ржУ ржЪрж╛ржЩрзНржХ ржПржХрждрзНрж░рж┐ржд ржХрж░рзБржи
    output_filename = os.path.join(temp_folder, f"{title}_ai_voice.mp3")
    combined = AudioSegment.empty()
    
    for audio_file in chunk_audio_files:
        try:
            segment = AudioSegment.from_file(audio_file)
            combined += segment
            
            # ржЪрж╛ржЩрзНржХ ржлрж╛ржЗрж▓ ржбрж┐рж▓рж┐ржЯ ржХрж░рзБржи (ржРржЪрзНржЫрж┐ржХ)
            os.remove(audio_file)
        except Exception as e:
            print(f"тЭМ Error processing audio file {audio_file}: {e}")
    
    # ржПржХрждрзНрж░рж┐ржд ржЕржбрж┐ржУ рж╕рзЗржн ржХрж░рзБржи
    combined.export(output_filename, format="mp3")
    print(f"тЬЕ Combined AI voice saved to: {output_filename}")
    
    # ржЪрж╛ржЩрзНржХ ржлрзЛрж▓рзНржбрж╛рж░ ржбрж┐рж▓рж┐ржЯ ржХрж░рзБржи
    try:
        os.rmdir(chunk_folder)
    except:
        print(f"тЪая╕П Could not delete chunk folder: {chunk_folder}")
    
    return output_filename