#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import random
import subprocess
import glob
import tempfile
import shutil

class FaceFootageHandler:
    """
    ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶≤ ‡¶´‡ßÅ‡¶ü‡ßá‡¶ú (‡¶´‡ßá‡¶∏ ‡¶´‡ßÅ‡¶ü‡ßá‡¶ú) ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡•§
    ‡¶è‡¶ü‡¶ø ‡¶∂‡¶∞‡ßç‡¶ü‡¶∏ ‡¶ì ‡¶≤‡¶Ç ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶ï‡¶Ø‡¶º‡ßá‡¶ï ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡ßá ‡¶´‡ßá‡¶∏ ‡¶´‡ßÅ‡¶ü‡ßá‡¶ú ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßá‡•§
    """
    
    def __init__(self, base_path):
        """
        ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú‡¶æ‡¶∞ - ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶™‡¶æ‡¶•‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßá

        Args:
            base_path (str): ‡¶™‡ßç‡¶∞‡ßã‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡ßá‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶™‡¶æ‡¶•
        """
        self.base_path = base_path
        
        # ‡¶´‡ßá‡¶∏ ‡¶´‡ßÅ‡¶ü‡ßá‡¶ú ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞
        self.real_footage_shorts = os.path.join(base_path, "real_footage_shorts")
        self.real_footage_long = os.path.join(base_path, "real_footage_long")
        
        # ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
        os.makedirs(self.real_footage_shorts, exist_ok=True)
        os.makedirs(self.real_footage_long, exist_ok=True)
        
        # URL ‡¶´‡¶æ‡¶á‡¶≤‡¶ó‡ßÅ‡¶≤‡¶ø‡¶∞ ‡¶™‡¶æ‡¶•
        self.shorts_with_face_url_file = os.path.join(base_path, "youtube_shorts_with_5_sec_with_face.txt")
        self.long_with_face_url_file = os.path.join(base_path, "youtube_long_with_5_sec_with_face.txt")
        self.shorts_with_face_ai_url_file = os.path.join(base_path, "youtube_shorts_with_5_sec_with_face_ai.txt")
        self.long_with_face_ai_url_file = os.path.join(base_path, "youtube_long_with_5_sec_with_face_ai.txt")
        
        print(f"‚úÖ Face Footage Handler initialized with base path: {base_path}")
    
    def check_face_footage_files(self):
        """
        ‡¶´‡ßá‡¶∏ ‡¶´‡ßÅ‡¶ü‡ßá‡¶ú‡ßá‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶Ø‡¶º
        
        Returns:
            dict: ‡¶â‡¶≠‡¶Ø‡¶º ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞‡ßá‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ
        """
        shorts_files = glob.glob(os.path.join(self.real_footage_shorts, "*.mp4")) + \
                      glob.glob(os.path.join(self.real_footage_shorts, "*.mov"))
        
        long_files = glob.glob(os.path.join(self.real_footage_long, "*.mp4")) + \
                     glob.glob(os.path.join(self.real_footage_long, "*.mov"))
        
        file_counts = {
            "shorts": len(shorts_files),
            "long": len(long_files)
        }
        
        print(f"üîç Found {file_counts['shorts']} shorts face footage files")
        print(f"üîç Found {file_counts['long']} long face footage files")
        
        return file_counts
    
    def get_random_face_footage(self, is_short=True, max_duration=5.0):
        """
        ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶≤ ‡¶´‡ßÅ‡¶ü‡ßá‡¶ú ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶Æ‡¶≠‡¶æ‡¶¨‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡ßÅ‡¶ü‡ßá‡¶ú ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡ßá‡¶Ø‡¶º
        ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßá ‡¶∏‡ßá‡¶ü‡¶æ‡¶ï‡ßá ‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶∏‡¶Æ‡¶Ø‡¶º‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶∞‡¶æ‡¶ñ‡ßá‡•§
        
        Args:
            is_short (bool): ‡¶∂‡¶∞‡ßç‡¶ü‡¶∏ ‡¶®‡¶æ ‡¶≤‡¶Ç ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì
            max_duration (float): ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡ßÄ‡¶Æ‡¶æ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡ßá
        
        Returns:
            str: ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶´‡ßÅ‡¶ü‡ßá‡¶ú‡ßá‡¶∞ ‡¶™‡¶æ‡¶• (‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßá ‡¶ü‡ßá‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡¶æ‡¶∞‡¶ø ‡¶´‡¶æ‡¶á‡¶≤)
        """
        # ‡¶â‡¶™‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶´‡¶æ‡¶á‡¶≤‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶™‡¶æ‡¶Ø‡¶º
        folder = self.real_footage_shorts if is_short else self.real_footage_long
        
        face_files = glob.glob(os.path.join(folder, "*.mp4")) + \
                     glob.glob(os.path.join(folder, "*.mov"))
        
        if not face_files:
            print(f"‚ö†Ô∏è No face footage files found in {folder}")
            return None
        
        # ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶Æ‡¶≠‡¶æ‡¶¨‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡¶æ‡¶á‡¶≤ ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡ßá‡¶Ø‡¶º
        selected_file = random.choice(face_files)
        
        # ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶°‡¶ø‡¶â‡¶∞‡ßá‡¶∂‡¶® ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá
        try:
            duration = float(
                subprocess.check_output(
                    f'ffprobe -i "{selected_file}" -show_entries format=duration -v quiet -of csv="p=0"',
                    shell=True
                ).decode().strip()
            )
        except Exception as e:
            print(f"‚ö†Ô∏è Error checking duration of {selected_file}: {e}")
            return selected_file
        
        # ‡¶Ø‡¶¶‡¶ø ‡¶¶‡ßà‡¶∞‡ßç‡¶ò‡ßç‡¶Ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶∏‡ßÄ‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶¨‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶´‡¶ø‡¶∞‡¶ø‡¶Ø‡¶º‡ßá ‡¶¶‡ßá‡¶Ø‡¶º
        if duration <= max_duration:
            print(f"‚úÖ Selected face footage: {os.path.basename(selected_file)} (Duration: {duration:.2f}s)")
            return selected_file
        
        # ‡¶°‡¶ø‡¶â‡¶∞‡ßá‡¶∂‡¶® ‡¶¨‡ßá‡¶∂‡¶ø ‡¶π‡¶≤‡ßá, ‡¶™‡ßç‡¶∞‡¶•‡¶Æ max_duration ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶ï‡ßá‡¶ü‡ßá ‡¶®‡ßá‡¶Ø‡¶º
        print(f"‚ö†Ô∏è Selected footage is too long ({duration:.2f}s). Trimming to {max_duration:.2f}s")
        
        # ‡¶ü‡ßá‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡¶æ‡¶∞‡¶ø ‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡ßá‡¶Æ ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡ßá
        temp_file = tempfile.NamedTemporaryFile(suffix=".mp4", delete=False)
        temp_file.close()
        trimmed_file = temp_file.name
        
        # ffmpeg ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶ï‡¶∞‡ßá (‡¶Ö‡¶°‡¶ø‡¶ì ‡¶õ‡¶æ‡¶°‡¶º‡¶æ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï)
        trim_cmd = f'ffmpeg -i "{selected_file}" -t {max_duration} -c:v copy -an "{trimmed_file}" -y'
        subprocess.run(trim_cmd, shell=True)
        
        print(f"‚úÖ Trimmed and using first {max_duration:.2f}s of {os.path.basename(selected_file)}")
        return trimmed_file
    
    def combine_face_and_stock_footage(self, face_footage, stock_footage, output_file, audio_file, audio_duration):
        """
        ‡¶´‡ßá‡¶∏ ‡¶´‡ßÅ‡¶ü‡ßá‡¶ú ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶ü‡¶ï ‡¶´‡ßÅ‡¶ü‡ßá‡¶ú ‡¶ï‡¶Æ‡ßç‡¶¨‡¶æ‡¶á‡¶® ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá
        
        Args:
            face_footage (str): ‡¶´‡ßá‡¶∏ ‡¶´‡ßÅ‡¶ü‡ßá‡¶ú‡ßá‡¶∞ ‡¶™‡¶æ‡¶•
            stock_footage (str): ‡¶∏‡ßç‡¶ü‡¶ï ‡¶´‡ßÅ‡¶ü‡ßá‡¶ú‡ßá‡¶∞ ‡¶™‡¶æ‡¶• (‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶≤‡ßÅ‡¶™ ‡¶ï‡¶∞‡¶æ)
            output_file (str): ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶™‡¶æ‡¶•
            audio_file (str): ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶™‡¶æ‡¶•
            audio_duration (float): ‡¶Ö‡¶°‡¶ø‡¶ì‡¶∞ ‡¶¶‡ßà‡¶∞‡ßç‡¶ò‡ßç‡¶Ø ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡ßá
            
        Returns:
            bool: ‡¶∏‡¶´‡¶≤ ‡¶π‡¶≤‡ßá True, ‡¶Ö‡¶®‡ßç‡¶Ø‡¶•‡¶æ‡¶Ø‡¶º False
        """
        try:
            # ‡¶´‡ßá‡¶∏ ‡¶´‡ßÅ‡¶ü‡ßá‡¶ú‡ßá‡¶∞ ‡¶¶‡ßà‡¶∞‡ßç‡¶ò‡ßç‡¶Ø ‡¶ú‡¶æ‡¶®‡¶§‡ßá
            face_duration = float(
                subprocess.check_output(
                    f'ffprobe -i "{face_footage}" -show_entries format=duration -v quiet -of csv="p=0"',
                    shell=True
                ).decode().strip()
            )
            
            # ‡¶∏‡ßç‡¶ü‡¶ï ‡¶´‡ßÅ‡¶ü‡ßá‡¶ú‡ßá‡¶∞ ‡¶¶‡ßà‡¶∞‡ßç‡¶ò‡ßç‡¶Ø (‡¶Ö‡¶°‡¶ø‡¶ì ‡¶¶‡ßà‡¶∞‡ßç‡¶ò‡ßç‡¶Ø - ‡¶´‡ßá‡¶∏ ‡¶¶‡ßà‡¶∞‡ßç‡¶ò‡ßç‡¶Ø)
            remaining_duration = max(0, audio_duration - face_duration)
            
            # ‡¶Ö‡¶∏‡ßç‡¶•‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ
            temp_dir = os.path.dirname(output_file)
            stock_trimmed = os.path.join(temp_dir, "stock_trimmed.mp4")
            
            # ‡¶∏‡ßç‡¶ü‡¶ï ‡¶´‡ßÅ‡¶ü‡ßá‡¶ú‡¶ï‡ßá ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶∏‡¶Æ‡¶Ø‡¶º‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶ï‡¶∞‡¶æ
            if remaining_duration > 0:
                trim_cmd = f'ffmpeg -i "{stock_footage}" -t {remaining_duration} -an "{stock_trimmed}" -y'
                subprocess.run(trim_cmd, shell=True)
                
                # ‡¶ü‡ßá‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡¶æ‡¶∞‡¶ø ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
                temp_list = os.path.join(temp_dir, "concat_list.txt")
                with open(temp_list, "w") as f:
                    f.write(f"file '{os.path.abspath(face_footage)}'\n")
                    f.write(f"file '{os.path.abspath(stock_trimmed)}'\n")
                
                # ‡¶´‡¶æ‡¶á‡¶≤‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶ï‡¶®‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü ‡¶ï‡¶∞‡¶æ
                concat_cmd = f'ffmpeg -f concat -safe 0 -i "{temp_list}" -c copy "{output_file}" -y'
                subprocess.run(concat_cmd, shell=True)
                
                # ‡¶ï‡ßç‡¶≤‡¶ø‡¶®‡¶Ü‡¶™
                os.remove(temp_list)
                os.remove(stock_trimmed)
                
                print(f"‚úÖ Combined footage: {face_duration:.2f}s face + {remaining_duration:.2f}s stock")
                return True
            else:
                # ‡¶´‡ßá‡¶∏ ‡¶´‡ßÅ‡¶ü‡ßá‡¶ú‡¶á ‡¶Ø‡¶•‡ßá‡¶∑‡ßç‡¶ü
                shutil.copy2(face_footage, output_file)
                print(f"‚úÖ Using only face footage: {face_duration:.2f}s (sufficient for audio)")
                return True
                
        except Exception as e:
            print(f"‚ùå Error combining footage: {e}")
            return False
        
    # Create a simpler, more reliable transition that works with FFmpeg
def create_smooth_transition(face_footage, stock_footage, output_file, transition_time=1.0):
    """
    Create a smooth transition between face footage and stock footage
    
    Args:
        face_footage (str): Path to face footage
        stock_footage (str): Path to stock footage
        output_file (str): Path to output file
        transition_time (float): Transition duration in seconds
    
    Returns:
        bool: True if successful, False otherwise
    """
    try:
        # Get the duration of face footage
        face_duration = float(
            subprocess.check_output(
                f'ffprobe -i "{face_footage}" -show_entries format=duration -v quiet -of csv="p=0"',
                shell=True
            ).decode().strip()
        )
        
        # Calculate the overlap point (slightly before end of face footage)
        overlap_point = max(0, face_duration - transition_time)
        
        # Create a crossfade filter
        complex_filter = (
            f"[0:v]trim=0:{overlap_point},setpts=PTS-STARTPTS[firstpart];"
            f"[0:v]trim={overlap_point}:{face_duration},setpts=PTS-STARTPTS[fadeoutpart];"
            f"[1:v]trim=0:{transition_time},setpts=PTS-STARTPTS[fadeinpart];"
            f"[1:v]trim={transition_time},setpts=PTS-STARTPTS[secondpart];"
            f"[fadeoutpart][fadeinpart]xfade=transition=fade:duration={transition_time}:offset=0[xfaded];"
            f"[firstpart][xfaded][secondpart]concat=n=3:v=1:a=0"
        )
        
        # Execute the command
        cmd = (
            f'ffmpeg -i "{face_footage}" -i "{stock_footage}" '
            f'-filter_complex "{complex_filter}" '
            f'-c:v libx264 -pix_fmt yuv420p "{output_file}" -y'
        )
        
        subprocess.run(cmd, shell=True, check=True)
        return True
        
    except Exception as e:
        print(f"‚ùå Error creating transition: {e}")
        return False
    
    def get_url_files(self):
        """
        ‡¶´‡ßá‡¶∏ ‡¶´‡ßÅ‡¶ü‡ßá‡¶ú URL ‡¶´‡¶æ‡¶á‡¶≤‡¶ó‡ßÅ‡¶≤‡¶ø‡¶∞ ‡¶Ö‡¶∏‡ßç‡¶§‡¶ø‡¶§‡ßç‡¶¨ ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶¨‡¶∏‡ßç‡¶§‡ßÅ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡ßá
        
        Returns:
            dict: ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶≤‡¶ø‡¶Ç‡¶ï‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ
        """
        url_data = {}
        
        # ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø URL ‡¶´‡¶æ‡¶á‡¶≤ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ
        for file_type, file_path in [
            ("shorts_with_face", self.shorts_with_face_url_file),
            ("long_with_face", self.long_with_face_url_file),
            ("shorts_with_face_ai", self.shorts_with_face_ai_url_file),
            ("long_with_face_ai", self.long_with_face_ai_url_file)
        ]:
            if os.path.exists(file_path):
                with open(file_path, "r", encoding="utf-8") as f:
                    urls = [line.strip() for line in f.readlines() if line.strip()]
                url_data[file_type] = urls
                print(f"‚úÖ Found {len(urls)} URLs in {os.path.basename(file_path)}")
            else:
                url_data[file_type] = []
                print(f"‚ö†Ô∏è URL file not found: {os.path.basename(file_path)}")
        
        return url_data
    
    def get_video_type_info(self, url_file):
        """
        URL ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶•‡ßá‡¶ï‡ßá ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶ü‡¶æ‡¶á‡¶™ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá
        
        Args:
            url_file (str): URL ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶™‡¶æ‡¶•
            
        Returns:
            tuple: (is_short, use_ai_voice) - ‡¶∂‡¶∞‡ßç‡¶ü‡¶∏ ‡¶ï‡¶ø‡¶®‡¶æ, AI ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá ‡¶ï‡¶ø‡¶®‡¶æ
        """
        filename = os.path.basename(url_file).lower()
        is_short = "shorts" in filename
        use_ai_voice = "_ai" in filename
        
        return is_short, use_ai_voice

    def prepare_combined_video(self, temp_folder, audio_file, audio_duration, is_short):
        """
        ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡ßá‡¶∏ ‡¶´‡ßÅ‡¶ü‡ßá‡¶ú ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶ü‡¶ï ‡¶´‡ßÅ‡¶ü‡ßá‡¶ú ‡¶ï‡¶Æ‡ßç‡¶¨‡¶æ‡¶á‡¶® ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶ø‡¶™‡ßá‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá
        
        Args:
            temp_folder (str): ‡¶ü‡ßá‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡¶æ‡¶∞‡¶ø ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞‡ßá‡¶∞ ‡¶™‡¶æ‡¶•
            audio_file (str): ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶™‡¶æ‡¶•
            audio_duration (float): ‡¶Ö‡¶°‡¶ø‡¶ì‡¶∞ ‡¶¶‡ßà‡¶∞‡ßç‡¶ò‡ßç‡¶Ø ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡ßá
            is_short (bool): ‡¶∂‡¶∞‡ßç‡¶ü‡¶∏ ‡¶®‡¶æ ‡¶≤‡¶Ç ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì
            
        Returns:
            str: ‡¶™‡ßç‡¶∞‡¶ø‡¶™‡ßá‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶™‡¶æ‡¶•
        """
        # ‡¶´‡ßá‡¶∏ ‡¶´‡ßÅ‡¶ü‡ßá‡¶ú ‡¶•‡ßá‡¶ï‡ßá ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶Æ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ
        face_footage = self.get_random_face_footage(is_short=is_short)
        
        if not face_footage:
            print("‚ö†Ô∏è No face footage available, using stock footage only")
            return None
        
        # ‡¶∏‡ßç‡¶ü‡¶ï ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡ßÅ‡¶™ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá
        # ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶Æ‡ßá‡¶á‡¶® ‡¶ï‡ßã‡¶°‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§ ‡¶π‡¶¨‡ßá
        # ‡¶è‡¶ü‡¶ø ‡¶®‡¶æ‡¶≤ ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßá, ‡¶Ø‡ßá‡¶® ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø ‡¶Ø‡ßá ‡¶´‡ßá‡¶∏ ‡¶´‡ßÅ‡¶ü‡ßá‡¶ú ‡¶π‡¶¨‡ßá
        return face_footage
    
    def is_face_footage_url_file(self, url_file):
        """
        ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá ‡¶Ø‡ßá ‡¶è‡¶ï‡¶ü‡¶ø URL ‡¶´‡¶æ‡¶á‡¶≤ ‡¶´‡ßá‡¶∏ ‡¶´‡ßÅ‡¶ü‡ßá‡¶ú‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶ø‡¶®‡¶æ
        
        Args:
            url_file (str): URL ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶™‡¶æ‡¶•
            
        Returns:
            bool: ‡¶´‡ßá‡¶∏ ‡¶´‡ßÅ‡¶ü‡ßá‡¶ú‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶π‡¶≤‡ßá True, ‡¶Ö‡¶®‡ßç‡¶Ø‡¶•‡¶æ‡¶Ø‡¶º False
        """
        basename = os.path.basename(url_file)
        return basename in [
            "youtube_shorts_with_5_sec_with_face.txt",
            "youtube_long_with_5_sec_with_face.txt",
            "youtube_shorts_with_5_sec_with_face_ai.txt", 
            "youtube_long_with_5_sec_with_face_ai.txt"
        ]