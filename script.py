import os
import shutil
import subprocess
import yt_dlp
import whisper
from glob import glob
import random
import string
import pysubs2
import torch
import requests
import json
import re
from concurrent.futures import ThreadPoolExecutor
from concurrent.futures import as_completed
from openai import AzureOpenAI
from azure.identity import DefaultAzureCredential, get_bearer_token_provider 
from dotenv import load_dotenv
from subtitle_design import apply_design  # `subtitle_design.py` ржерзЗржХрзЗ ржбрж┐ржЬрж╛ржЗржи ржлрж╛ржВрж╢ржи ржЗржоржкрзЛрж░рзНржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
from azure_prompt import generate_output_from_azure  # Azure AI ржПрж░ ржлрж╛ржВрж╢ржиржЯрж┐ ржЗржоржкрзЛрж░рзНржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
from metadata_updater import set_file_properties
from metadata_updater import process_video_metadata
from ai_voice_generator import transcribe_and_generate_ai_voice  # AI ржнржпрж╝рзЗрж╕ ржлрж╛ржВрж╢ржи ржЗржоржкрзЛрж░рзНржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
import time
from face_footage_handler import FaceFootageHandler
import math  # ржпрзЛржЧ ржХрж░рзБржи ржпржжрж┐ ржЖржЧрзЗ ржирж╛ ржерж╛ржХрзЗ
from subtitle_design import generate_subtitles_karaoke_chunked

# # voice_cloning.py ржлрж╛ржЗрж▓ ржЗржоржкрзЛрж░рзНржЯ ржХрж░рзБржи
# from voice_cloning import generate_cloned_voice_from_transcript

load_dotenv()  # ржПржЯрж┐ ржЖржкржирж╛рж░ .env ржлрж╛ржЗрж▓ ржерзЗржХрзЗ ржкрж░рж┐ржмрзЗрж╢ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ржЧрзБрж▓рзЛ рж▓рзЛржб ржХрж░ржмрзЗ


# Azure OpenAI API ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи
endpoint = os.getenv("ENDPOINT_URL", "https://et1.openai.azure.com/")  
deployment = os.getenv("DEPLOYMENT_NAME", "gpt-4o")  

# Initialize Azure OpenAI Service client with Entra ID authentication
token_provider = get_bearer_token_provider(  
    DefaultAzureCredential(),  
    "https://cognitiveservices.azure.com/.default"  
)  

client = AzureOpenAI(  
    azure_endpoint=endpoint,  
    azure_ad_token_provider=token_provider,  
    api_version="2024-05-01-preview",  
)

# ЁЯФ╣ ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи
BASE_PATH = "D:/video_project/"
OLD_AUDIO_FOLDER = "D:/video_project/old_audio"
YOUTUBE_URL_FILE = os.path.join(BASE_PATH, "youtube_urls.txt")
YOUTUBE_SHORTS_URL_FILE = os.path.join(BASE_PATH, "youtube_shorts_urls.txt")
# AI ржнржпрж╝рзЗрж╕ ржнрж┐ржбрж┐ржУ URL ржлрж╛ржЗрж▓
YOUTUBE_AI_VOICE_SHORTS_URL_FILE = os.path.join(BASE_PATH, "youtube_ai_voice_shorts_urls.txt")
YOUTUBE_AI_VOICE_LONG_VIDEO_URL_FILE = os.path.join(BASE_PATH, "youtube_ai_voice_long_video_urls.txt")

AUDIO_FOLDER = os.path.join(BASE_PATH, "audio_files")
STOCK_VIDEO = os.path.join(BASE_PATH, "stock_video.mp4")  # ржлрж▓ржмрзНржпрж╛ржХ рж╣рж┐рж╕рзЗржмрзЗ
OUTPUT_FOLDER = os.path.join(BASE_PATH, "output_videos")
SHORTS_FOLDER = os.path.join(OUTPUT_FOLDER, "shorts")
TEMP_FOLDER = os.path.join(BASE_PATH, "temp_output")
SHORTS_STOCK_VIDEOS_FOLDER = os.path.join(BASE_PATH, "shorts_stock_videos")
STOCK_VIDEOS_FOLDER = os.path.join(BASE_PATH, "stock_videos")
BACKGROUND_MUSIC_FOLDER = os.path.join(BASE_PATH, "background_music")
# ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржирзЗ ржпрзЛржЧ ржХрж░рзБржи
CLONE_AUDIO_FOLDER = os.path.join(BASE_PATH, "clone_audio")
YOUTUBE_CLONE_SHORTS_URL_FILE = os.path.join(BASE_PATH, "youtube_clone_shorts.txt")



# ЁЯФ╣ ржлрзЗрж╕ ржлрзБржЯрзЗржЬ ржлрзЛрж▓рзНржбрж╛рж░ ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи
REAL_FOOTAGE_SHORTS_FOLDER = os.path.join(BASE_PATH, "real_footage_shorts")
REAL_FOOTAGE_LONG_FOLDER = os.path.join(BASE_PATH, "real_footage_long")
YOUTUBE_SHORTS_WITH_FACE_URL_FILE = os.path.join(BASE_PATH, "youtube_shorts_with_5_sec_with_face.txt")
YOUTUBE_LONG_WITH_FACE_URL_FILE = os.path.join(BASE_PATH, "youtube_long_with_5_sec_with_face.txt")
YOUTUBE_SHORTS_WITH_FACE_AI_URL_FILE = os.path.join(BASE_PATH, "youtube_shorts_with_5_sec_with_face_ai.txt")
YOUTUBE_LONG_WITH_FACE_AI_URL_FILE = os.path.join(BASE_PATH, "youtube_long_with_5_sec_with_face_ai.txt")

# рж▓ржЧ ржлрж╛ржЗрж▓рзЗрж░ ржкрж╛рже
LOG_FILE = os.path.join(BASE_PATH, "already_done.txt")

# ЁЯФ╣ Ensure output directories exist
os.makedirs(AUDIO_FOLDER, exist_ok=True)
os.makedirs(OUTPUT_FOLDER, exist_ok=True)
os.makedirs(SHORTS_FOLDER, exist_ok=True)
os.makedirs(TEMP_FOLDER, exist_ok=True)
os.makedirs(SHORTS_STOCK_VIDEOS_FOLDER, exist_ok=True)
# ржлрзЛрж▓рзНржбрж╛рж░ ржЧрзБрж▓рж┐ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи
os.makedirs(REAL_FOOTAGE_SHORTS_FOLDER, exist_ok=True)
os.makedirs(REAL_FOOTAGE_LONG_FOLDER, exist_ok=True)

# FaceFootageHandler ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬ ржХрж░рзБржи
face_handler = FaceFootageHandler(BASE_PATH)

os.makedirs(CLONE_AUDIO_FOLDER, exist_ok=True)

# ржлрж╛ржЗрж▓ ржирж╛ржо рж╕рзЗржирж┐ржЯрж╛ржЗржЬ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи
def sanitize_filename(filename):
    """
    ржлрж╛ржЗрж▓ ржирж╛ржо ржерзЗржХрзЗ ржмрж┐рж╢рзЗрж╖ ржЕржХрзНрж╖рж░ржЧрзБрж▓рзЛ рж░рж┐ржорзБржн ржХрж░рзЗ рж╢рзБржзрзБржорж╛рждрзНрж░ рж╕рзЗржл ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ рж░рж╛ржЦрзЗред
    
    Args:
        filename (str): ржЕрж░рж┐ржЬрж┐ржирж╛рж▓ ржлрж╛ржЗрж▓ржирж╛ржо
        
    Returns:
        tuple: (sanitized_name, original_name) - рж╕рзЗржирж┐ржЯрж╛ржЗржЬ ржХрж░рж╛ ржирж╛ржо ржПржмржВ ржЕрж░рж┐ржЬрж┐ржирж╛рж▓ ржирж╛ржо
    """
    # ржЕрж░рж┐ржЬрж┐ржирж╛рж▓ ржирж╛ржо рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзБржи
    original_name = filename
    
    # ржПржХрзНрж╕ржЯрзЗржирж╢ржи ржЖрж▓рж╛ржжрж╛ ржХрж░рзБржи
    base_name, extension = os.path.splitext(filename)
    
    # ржмрж┐рж╢рзЗрж╖ ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ рж░рж┐ржорзБржн ржХрж░рзБржи ржПржмржВ рж╕рзНржкрзЗрж╕ ржЖржирзНржбрж╛рж░рж╕рзНржХрзЛрж░ ржжрж┐ржпрж╝рзЗ ржкрзНрж░рждрж┐рж╕рзНржерж╛ржкржи ржХрж░рзБржи
    sanitized_base = re.sub(r'[^\w\s-]', '', base_name)
    sanitized_base = re.sub(r'[\s]+', '_', sanitized_base)
    
    # ржЦрзБржм рж▓ржорзНржмрж╛ ржирж╛ржо рж╣рж▓рзЗ рж╕рзЗржЯрж┐ рж╢рж░рзНржЯ ржХрж░рзБржи
    if len(sanitized_base) > 50:
        sanitized_base = sanitized_base[:50]
    
    # рж╕рзЗржирж┐ржЯрж╛ржЗржЬ ржХрж░рж╛ ржирж╛ржо ржлрж┐рж░рж┐ржпрж╝рзЗ ржжрж┐ржи
    sanitized_name = sanitized_base + extension
    
    return sanitized_name, original_name


# ржлрж╛ржЗрж▓ ржирж╛ржо ржорзНржпрж╛ржкрж┐ржВ ржПрж░ ржЬржирзНржп ржбрж┐ржХрж╢ржирж╛рж░рж┐
filename_mapping = {}

def map_filename(original_path, sanitized_path):
    """
    ржЕрж░рж┐ржЬрж┐ржирж╛рж▓ ржлрж╛ржЗрж▓ ржкрж╛рже ржПржмржВ рж╕рзЗржирж┐ржЯрж╛ржЗржЬ ржХрж░рж╛ ржлрж╛ржЗрж▓ ржкрж╛ржерзЗрж░ ржорзНржпрж╛ржкрж┐ржВ рж░рж╛ржЦрзЗред
    
    Args:
        original_path (str): ржЕрж░рж┐ржЬрж┐ржирж╛рж▓ ржлрж╛ржЗрж▓ ржкрж╛рже
        sanitized_path (str): рж╕рзЗржирж┐ржЯрж╛ржЗржЬ ржХрж░рж╛ ржлрж╛ржЗрж▓ ржкрж╛рже
    """
    filename_mapping[sanitized_path] = original_path
    
def get_original_filename(sanitized_path):
    """
    рж╕рзЗржирж┐ржЯрж╛ржЗржЬ ржХрж░рж╛ ржлрж╛ржЗрж▓ ржкрж╛рже ржерзЗржХрзЗ ржЕрж░рж┐ржЬрж┐ржирж╛рж▓ ржлрж╛ржЗрж▓ ржкрж╛рже ржкрж╛ржпрж╝ред
    
    Args:
        sanitized_path (str): рж╕рзЗржирж┐ржЯрж╛ржЗржЬ ржХрж░рж╛ ржлрж╛ржЗрж▓ ржкрж╛рже
        
    Returns:
        str: ржЕрж░рж┐ржЬрж┐ржирж╛рж▓ ржлрж╛ржЗрж▓ ржкрж╛рже, ржпржжрж┐ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝; ржЕржирзНржпржерж╛ржпрж╝ рж╕рзЗржирж┐ржЯрж╛ржЗржЬ ржХрж░рж╛ ржкрж╛рже
    """
    return filename_mapping.get(sanitized_path, sanitized_path)

def get_original_basename(sanitized_path):
    """
    рж╕рзЗржирж┐ржЯрж╛ржЗржЬ ржХрж░рж╛ ржлрж╛ржЗрж▓ ржкрж╛рже ржерзЗржХрзЗ ржЕрж░рж┐ржЬрж┐ржирж╛рж▓ ржлрж╛ржЗрж▓ ржирж╛ржо (ржмрзЗрж╕ржирж╛ржо) ржкрж╛ржпрж╝ред
    
    Args:
        sanitized_path (str): рж╕рзЗржирж┐ржЯрж╛ржЗржЬ ржХрж░рж╛ ржлрж╛ржЗрж▓ ржкрж╛рже
        
    Returns:
        str: ржЕрж░рж┐ржЬрж┐ржирж╛рж▓ ржлрж╛ржЗрж▓рзЗрж░ ржмрзЗрж╕ржирж╛ржо, ржпржжрж┐ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝; ржЕржирзНржпржерж╛ржпрж╝ рж╕рзЗржирж┐ржЯрж╛ржЗржЬ ржХрж░рж╛ ржмрзЗрж╕ржирж╛ржо
    """
    original_path = get_original_filename(sanitized_path)
    return os.path.splitext(os.path.basename(original_path))[0]


def process_single_url(url, url_file):
    """
    ржПржХржЯрж┐ URL ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛рж░ ржкрзВрж░рзНржгрж╛ржЩрзНржЧ ржкржжрзНржзрждрж┐
    """
    processed_urls = load_processed_urls()
    
    # URL ржЗрждрж┐ржоржзрзНржпрзЗ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ ржХрж┐ржирж╛ ржЪрзЗржХ ржХрж░рзБржи
    if url in processed_urls:
        print(f"тПй URL ржЗрждрж┐ржоржзрзНржпрзЗ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ: {url}")
        return False
    
    try:
        # URL ржбрж╛ржЙржирж▓рзЛржб ржПржмржВ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ
        temp_url_file = os.path.join(BASE_PATH, f"temp_url_{int(time.time())}.txt")
        with open(temp_url_file, 'w', encoding='utf-8') as f:
            f.write(url)
        
        # ржбрж╛ржЙржирж▓рзЛржб ржПржмржВ ржкрзНрж░рж╕рзЗрж╕
        audio_files = download_youtube_audio(temp_url_file)
        
        if audio_files:
            # рж╕ржлрж▓ рж╣рж▓рзЗ URL рж▓ржЧ ржлрж╛ржЗрж▓рзЗ ржпрзЛржЧ ржХрж░рзБржи
            save_processed_url(url)
            
            # ржЯрзЗржорзНржкрж░рж╛рж░рж┐ ржлрж╛ржЗрж▓ ржорзБржЫрзЗ ржжрж┐ржи
            os.remove(temp_url_file)
            
            # URL ржорзВрж▓ ржлрж╛ржЗрж▓ ржерзЗржХрзЗ ржорзБржЫрзЗ ржжрж┐ржи
            remove_url_from_file(url, url_file)
            
            return True
        else:
            print(f"тЭМ URL ржкрзНрж░рж╕рзЗрж╕рж┐ржВржпрж╝рзЗ ржмрзНржпрж░рзНрже: {url}")
            return False
    
    except Exception as e:
        print(f"тЭМ URL ржкрзНрж░рж╕рзЗрж╕рж┐ржВржпрж╝рзЗ рждрзНрж░рзБржЯрж┐: {url} - {e}")
        return False


def process_long_audio_in_chunks(audio_file, audio_temp_folder, use_ai_voice=False):
    """
    ржжрзАрж░рзНржШ ржЕржбрж┐ржУ ржлрж╛ржЗрж▓ржХрзЗ ржЪрж╛ржЩрзНржХрзЗ ржнрж╛ржЧ ржХрж░рзЗ, ржкрзНрж░рждрж┐ржЯрж┐ ржЪрж╛ржЩрзНржХрзЗрж░ ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб ржорж┐ржЙржЬрж┐ржХ рж░рж┐ржорзБржн ржХрж░рзЗ 
    ржПржмржВ рждрж╛рж░ржкрж░ рж╕ржм ржЪрж╛ржЩрзНржХ ржПржХрждрзНрж░рж┐ржд ржХрж░рзЗ ржПржХржЯрж┐ ржкрзВрж░рзНржгрж╛ржЩрзНржЧ ржлрж┐рж▓рзНржЯрж╛рж░ ржХрж░рж╛ ржЕржбрж┐ржУ ржлрж╛ржЗрж▓ рждрзИрж░рж┐ ржХрж░рзЗред
    ржЖржкржбрзЗржЯрзЗржб: ржмрж┐рж╢рзЗрж╖ ржкржжрзНржзрждрж┐рждрзЗ ржПрж░рж░ рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ ржУ рж░рж┐ржХржнрж╛рж░рж┐ ржпрзЛржЧ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ
    """
    audio_name = os.path.splitext(os.path.basename(audio_file))[0]
    
    # ржЕржбрж┐ржУ ржжрзИрж░рзНржШрзНржп ржЪрзЗржХ ржХрж░рзБржи
    try:
        duration_cmd = f'ffprobe -i "{audio_file}" -show_entries format=duration -v quiet -of csv="p=0"'
        audio_duration = float(subprocess.check_output(duration_cmd, shell=True).decode().strip())
        print(f"ЁЯУК Audio duration: {audio_duration:.2f}s ({audio_duration/60:.2f} minutes)")
        
        # 10 ржорж┐ржирж┐ржЯрзЗрж░ ржХржо рж╣рж▓рзЗ рж╕рж░рж╛рж╕рж░рж┐ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рзБржи
        if audio_duration <= 600:  # 10 minutes in seconds
            print(f"тЬЕ Audio is shorter than 10 minutes, processing directly")
            filtered_audio = os.path.join(audio_temp_folder, f"{audio_name}_filtered.wav")
            remove_background_music(audio_file, filtered_audio, audio_temp_folder)
            
            # ржпржжрж┐ AI ржнржпрж╝рзЗрж╕ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ рж╣ржпрж╝
            if use_ai_voice:
                print("ЁЯОЩя╕П Transcribing audio for AI voice generation...")
                transcript = transcribe_audio(filtered_audio)
                
                if transcript:
                    ai_voice_file = transcribe_and_generate_ai_voice(transcript, audio_name, audio_temp_folder)
                    
                    if ai_voice_file and os.path.exists(ai_voice_file):
                        print(f"тЬЕ Using AI voice: {ai_voice_file}")
                        return ai_voice_file
                    
            return filtered_audio
        
        # ржПржЦрж╛ржирзЗ ржЕржбрж┐ржУ ржЪрж╛ржЩрзНржХрж┐ржВ ржХрж░рж╛ рж╣ржмрзЗ
        print("ЁЯФД Audio is longer than 10 minutes, splitting into chunks for processing...")
        
        # ржЪрж╛ржЩрзНржХ ржлрзЛрж▓рзНржбрж╛рж░ рждрзИрж░рж┐ ржХрж░рзБржи
        chunks_folder = os.path.join(audio_temp_folder, "chunks")
        os.makedirs(chunks_folder, exist_ok=True)
        
        # ржкрзВрж░рзНржмрзЗрж░ ржЪрж╛ржЩрзНржХ рж╕рж╛ржЗржЬ 300 рж╕рзЗржХрзЗржирзНржб ржЫрж┐рж▓, ржПржЯрж╛ ржЖрж░ржУ ржХржо ржХрж░рзЗ ржмрзЗрж╢рж┐ рж░рж┐рж▓рж╛ржпрж╝рзЗржмрж▓ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
        chunk_size = 240  # 4 ржорж┐ржирж┐ржЯ (ржЖржЧрзЗ 5 ржорж┐ржирж┐ржЯ ржЫрж┐рж▓)
        
        # ржЪрж╛ржЩрзНржХ рж╕ржВржЦрзНржпрж╛ ржЧржгржирж╛
        num_chunks = math.ceil(audio_duration / chunk_size)
        print(f"ЁЯФк Splitting audio into {num_chunks} chunks of {chunk_size/60:.1f} minutes each")
        
        # ржкрзНрж░рждрж┐ржЯрж┐ ржЪрж╛ржЩрзНржХ рждрзИрж░рж┐ ржПржмржВ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рзБржи
        filtered_chunks = []
        
        for i in range(num_chunks):
            start_time = i * chunk_size
            # рж╢рзЗрж╖ ржЪрж╛ржЩрзНржХрзЗрж░ ржЬржирзНржп ржпржжрж┐ ржмрж╛ржХрж┐ рж╕ржоржпрж╝ ржХржо ржерж╛ржХрзЗ
            if i == num_chunks - 1:
                duration = audio_duration - start_time
            else:
                duration = chunk_size
            
            # ржЪрж╛ржЩрзНржХ ржлрж╛ржЗрж▓ ржкрж╛рже
            chunk_file = os.path.join(chunks_folder, f"chunk_{i+1}.mp3")
            
            # ffmpeg ржжрж┐ржпрж╝рзЗ ржЪрж╛ржЩрзНржХ рждрзИрж░рж┐ - рж╕рж░рзНржмрзЛржЪрзНржЪ 3 ржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░ржмрзЗ
            max_attempts = 3
            chunk_success = False
            
            for attempt in range(max_attempts):
                try:
                    chunk_cmd = f'ffmpeg -i "{audio_file}" -ss {start_time} -t {duration} -c:a libmp3lame -q:a 2 "{chunk_file}" -y'
                    subprocess.run(chunk_cmd, shell=True, timeout=300)  # 5 ржорж┐ржирж┐ржЯ ржЯрж╛ржЗржоржЖржЙржЯ
                    
                    if os.path.exists(chunk_file) and os.path.getsize(chunk_file) > 1000:  # ржХржоржкржХрзНрж╖рзЗ 1KB
                        chunk_success = True
                        print(f"тЬЕ Created chunk {i+1}/{num_chunks}: {chunk_file} (Attempt {attempt+1})")
                        break
                    else:
                        print(f"тЪая╕П Chunk file created but may be invalid: {chunk_file} (Attempt {attempt+1})")
                except Exception as e:
                    print(f"тЪая╕П Error creating chunk {i+1}, attempt {attempt+1}: {e}")
            
            if not chunk_success:
                print(f"тЭМ Failed to create chunk {i+1} after {max_attempts} attempts, skipping")
                continue
            
            # ржкрзНрж░рждрж┐ржЯрж┐ ржЪрж╛ржЩрзНржХрзЗрж░ ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб ржорж┐ржЙржЬрж┐ржХ рж░рж┐ржорзБржн ржХрж░рзБржи
            filtered_chunk = os.path.join(chunks_folder, f"chunk_{i+1}_filtered.wav")
            print(f"ЁЯФК Removing background from chunk {i+1}/{num_chunks}")
            
            # ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб рж░рж┐ржорзБржнрж╛рж▓ - рж╕рж░рзНржмрзЛржЪрзНржЪ 2 ржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░ржмрзЗ
            filter_success = False
            for attempt in range(2):
                try:
                    remove_background_music(chunk_file, filtered_chunk, chunks_folder)
                    
                    if os.path.exists(filtered_chunk) and os.path.getsize(filtered_chunk) > 1000:  # ржХржоржкржХрзНрж╖рзЗ 1KB
                        filtered_chunks.append(filtered_chunk)
                        print(f"тЬЕ Processed chunk {i+1}/{num_chunks} (Attempt {attempt+1})")
                        filter_success = True
                        break
                except Exception as e:
                    print(f"тЪая╕П Error processing chunk {i+1}, attempt {attempt+1}: {e}")
            
            # ржпржжрж┐ ржлрж┐рж▓рзНржЯрж╛рж░рж┐ржВ ржмрзНржпрж░рзНрже рж╣ржпрж╝, рждрж╛рж╣рж▓рзЗ ржЕрж░рж┐ржЬрж┐ржирж╛рж▓ ржлрж╛ржЗрж▓ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
            if not filter_success:
                print(f"тЪая╕П Using original chunk without filtering for chunk {i+1}")
                # ржЕрж░рж┐ржЬрж┐ржирж╛рж▓ ржЪрж╛ржЩрзНржХ WAV ржлрж░ржорзНржпрж╛ржЯрзЗ ржХржиржнрж╛рж░рзНржЯ ржХрж░рзБржи
                wav_chunk = os.path.join(chunks_folder, f"chunk_{i+1}_original.wav")
                try:
                    convert_cmd = f'ffmpeg -i "{chunk_file}" -c:a pcm_s16le "{wav_chunk}" -y'
                    subprocess.run(convert_cmd, shell=True)
                    if os.path.exists(wav_chunk) and os.path.getsize(wav_chunk) > 0:
                        filtered_chunks.append(wav_chunk)
                    else:
                        # ржПржЦржиржУ ржмрзНржпрж░рзНрже рж╣рж▓рзЗ, ржЕрж░рж┐ржЬрж┐ржирж╛рж▓ MP3 рж░рж╛ржЦрзБржи
                        filtered_chunks.append(chunk_file)
                except:
                    # ржХржиржнрж╛рж░рзНрж╢ржи ржмрзНржпрж░рзНрже рж╣рж▓рзЗ, ржЕрж░рж┐ржЬрж┐ржирж╛рж▓ рж░рж╛ржЦрзБржи
                    filtered_chunks.append(chunk_file)
        
        # ржпржжрж┐ ржХрзЛржирзЛ ржЪрж╛ржЩрзНржХ ржкрзНрж░рж╕рзЗрж╕ ржирж╛ рж╣ржпрж╝
        if not filtered_chunks:
            print("тЭМ No chunks were successfully processed")
            print("тЪая╕П Falling back to original audio file")
            # ржлрж▓ржмрзНржпрж╛ржХ рж╣рж┐рж╕рзЗржмрзЗ ржЕрж░рж┐ржЬрж┐ржирж╛рж▓ ржЕржбрж┐ржУ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзБржи
            return audio_file
        
        # ржПржЦржи рж╕ржм ржлрж┐рж▓рзНржЯрж╛рж░ ржХрж░рж╛ ржЪрж╛ржЩрзНржХ ржПржХрждрзНрж░рж┐ржд ржХрж░рзБржи ржПржХржЯрж┐ рж╕рж┐ржЩрзНржЧрзЗрж▓ ржЕржбрж┐ржУ ржлрж╛ржЗрж▓рзЗ
        print("\nЁЯФД Combining all filtered chunks into a single audio file...")
        
        # ffmpeg concat ржлрж┐рж▓рзНржЯрж╛рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЪрж╛ржЩрзНржХ ржПржХрждрзНрж░рж┐ржд ржХрж░рзБржи
        concat_list_file = os.path.join(chunks_folder, "concat_list.txt")
        with open(concat_list_file, "w", encoding="utf-8") as f:
            for chunk in filtered_chunks:
                f.write(f"file '{os.path.abspath(chunk)}'\n")
        
        # ржлрж┐рж▓рзНржЯрж╛рж░ ржХрж░рж╛ рж╕ржорзНржкрзВрж░рзНржг ржЕржбрж┐ржУ ржлрж╛ржЗрж▓
        final_filtered_audio = os.path.join(audio_temp_folder, f"{audio_name}_filtered_combined.wav")
        
        # ffmpeg ржжрж┐ржпрж╝рзЗ рж╕ржм ржЪрж╛ржЩрзНржХ ржПржХрждрзНрж░рж┐ржд ржХрж░рзБржи - рж╕рж░рзНржмрзЛржЪрзНржЪ 3 ржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░ржмрзЗ
        concat_success = False
        for attempt in range(3):
            try:
                concat_cmd = f'ffmpeg -f concat -safe 0 -i "{concat_list_file}" -c:a pcm_s24le -ar 48000 "{final_filtered_audio}" -y'
                subprocess.run(concat_cmd, shell=True, timeout=600)  # 10 ржорж┐ржирж┐ржЯ ржЯрж╛ржЗржоржЖржЙржЯ
                
                if os.path.exists(final_filtered_audio) and os.path.getsize(final_filtered_audio) > 10000:  # ржХржоржкржХрзНрж╖рзЗ 10KB
                    concat_success = True
                    print(f"тЬЕ Successfully combined all filtered chunks into: {final_filtered_audio} (Attempt {attempt+1})")
                    break
                else:
                    print(f"тЪая╕П Combined file created but may be invalid (Attempt {attempt+1})")
            except Exception as e:
                print(f"тЪая╕П Error combining chunks, attempt {attempt+1}: {e}")
        
        if concat_success:
            # ржпржжрж┐ AI ржнржпрж╝рзЗрж╕ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ рж╣ржпрж╝
            if use_ai_voice:
                print("ЁЯОЩя╕П Transcribing combined audio for AI voice generation...")
                transcript = transcribe_audio(final_filtered_audio)
                
                if transcript:
                    ai_voice_file = transcribe_and_generate_ai_voice(transcript, audio_name, audio_temp_folder)
                    
                    if ai_voice_file and os.path.exists(ai_voice_file):
                        print(f"тЬЕ Using AI voice: {ai_voice_file}")
                        return ai_voice_file
            
            return final_filtered_audio
        else:
            print("тЭМ Failed to combine filtered chunks after multiple attempts")
            # ржпржжрж┐ ржПржХрждрзНрж░рж┐ржд ржХрж░рж╛ ржмрзНржпрж░рзНрже рж╣ржпрж╝, рждржмрзЗ рж╢рзБржзрзБ ржкрзНрж░ржержо ржЪрж╛ржЩрзНржХ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзБржи
            if filtered_chunks:
                print("тЪая╕П Returning only the first filtered chunk as fallback")
                return filtered_chunks[0]
            
            print("тЪая╕П Returning original audio file as ultimate fallback")
            return audio_file
    
    except Exception as e:
        print(f"тЭМ Error processing long audio in chunks: {e}")
        print("тЪая╕П Returning original audio file as fallback")
        return audio_file  # ржорзВрж▓ ржЕржбрж┐ржУ ржлрж╛ржЗрж▓ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзБржи

def split_audio_into_chunks(audio_file, max_duration=600, temp_folder=None):
    """
    ржжрзАрж░рзНржШ ржЕржбрж┐ржУ ржлрж╛ржЗрж▓ржХрзЗ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржжрзИрж░рзНржШрзНржпрзЗрж░ ржЪрж╛ржЩрзНржХрзЗ ржнрж╛ржЧ ржХрж░рзЗред 
    max_duration: ржкрзНрж░рждрж┐ ржЪрж╛ржЩрзНржХрзЗрж░ рж╕рж░рзНржмрзЛржЪрзНржЪ ржжрзИрж░рзНржШрзНржп (рж╕рзЗржХрзЗржирзНржбрзЗ)
    """
    if not temp_folder:
        temp_folder = TEMP_FOLDER
    
    # ржЕржбрж┐ржУрж░ ржлрж╛ржЗрж▓ржирж╛ржо ржерзЗржХрзЗ ржмрзЗрж╕ ржирж╛ржо ржкрж╛ржЗ
    base_name = os.path.splitext(os.path.basename(audio_file))[0]
    
    # ржЕржбрж┐ржУ ржЪрж╛ржЩрзНржХрзЗрж░ ржЬржирзНржп ржПржХржЯрж┐ ржлрзЛрж▓рзНржбрж╛рж░ рждрзИрж░рж┐ ржХрж░рж┐
    chunks_folder = os.path.join(temp_folder, f"{base_name}_chunks")
    os.makedirs(chunks_folder, exist_ok=True)

    # ржЕржбрж┐ржУ ржжрзИрж░рзНржШрзНржп ржЪрзЗржХ ржХрж░рж┐
    try:
        duration_cmd = f'ffprobe -i "{audio_file}" -show_entries format=duration -v quiet -of csv="p=0"'
        duration = float(subprocess.check_output(duration_cmd, shell=True).decode().strip())
        print(f"ЁЯУК Audio duration: {duration:.2f}s ({duration/60:.2f} minutes)")
        
        # ржпржжрж┐ ржЕржбрж┐ржУ ржжрзИрж░рзНржШрзНржп max_duration ржПрж░ ржЪрзЗржпрж╝рзЗ ржХржо рж╣ржпрж╝, рждржмрзЗ ржЪрж╛ржЩрзНржХрж┐ржВ ржжрж░ржХрж╛рж░ ржирзЗржЗ
        if duration <= max_duration:
            print(f"тЬЕ Audio is shorter than the maximum chunk size, no need to split")
            return [audio_file]
        
        # ржЪрж╛ржЩрзНржХ рж╕ржВржЦрзНржпрж╛ ржЧржгржирж╛ ржХрж░рж┐
        num_chunks = math.ceil(duration / max_duration)
        print(f"ЁЯФк Splitting audio into {num_chunks} chunks of max {max_duration/60:.2f} minutes each")
        
        chunk_files = []
        
        # ржкрзНрж░рждрж┐ржЯрж┐ ржЪрж╛ржЩрзНржХ рждрзИрж░рж┐ ржХрж░рж┐
        for i in range(num_chunks):
            start_time = i * max_duration
            chunk_file = os.path.join(chunks_folder, f"{base_name}_chunk_{i+1}.mp3")
            
            # ржпржжрж┐ ржПржЯрж┐ рж╢рзЗрж╖ ржЪрж╛ржЩрзНржХ рж╣ржпрж╝, рждржмрзЗ рж╢рзБржзрзБ рж╢рзЗрж╖ ржЕржмржзрж┐ ржирж┐ржЗ
            if i == num_chunks - 1:
                # рж╢рзЗрж╖ ржЪрж╛ржЩрзНржХрзЗрж░ ржЬржирзНржп ffmpeg ржХржорж╛ржирзНржб
                chunk_cmd = f'ffmpeg -i "{audio_file}" -ss {start_time} -c:a libmp3lame -q:a 2 "{chunk_file}" -y'
            else:
                # ржорж╛ржЭржЦрж╛ржирзЗрж░ ржЪрж╛ржЩрзНржХрзЗрж░ ржЬржирзНржп ffmpeg ржХржорж╛ржирзНржб
                chunk_cmd = f'ffmpeg -i "{audio_file}" -ss {start_time} -t {max_duration} -c:a libmp3lame -q:a 2 "{chunk_file}" -y'
            
            # ffmpeg ржХржорж╛ржирзНржб ржЪрж╛рж▓рж╛ржЗ
            subprocess.run(chunk_cmd, shell=True)
            
            # ржпржжрж┐ ржЪрж╛ржЩрзНржХ ржлрж╛ржЗрж▓ рж╕ржлрж▓ржнрж╛ржмрзЗ рждрзИрж░рж┐ рж╣ржпрж╝, рждржмрзЗ рждрж╛рж▓рж┐ржХрж╛ржпрж╝ ржпрзЛржЧ ржХрж░рж┐
            if os.path.exists(chunk_file) and os.path.getsize(chunk_file) > 0:
                chunk_files.append(chunk_file)
                print(f"тЬЕ Created chunk {i+1}/{num_chunks}: {chunk_file}")
            else:
                print(f"тЭМ Failed to create chunk {i+1}/{num_chunks}")
        
        return chunk_files
        
    except Exception as e:
        print(f"тЭМ Error splitting audio into chunks: {e}")
        return [audio_file]  # рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ ржорзВрж▓ ржлрж╛ржЗрж▓ ржлрзЗрж░ржд ржжрж┐ржЗ
    
def transcribe_audio(audio_file):
    """рж╕рзНржкрж┐ржЪ ржЯрзБ ржЯрзЗржХрзНрж╕ржЯ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ Whisper ржжрж┐ржпрж╝рзЗ"""
    result = model.transcribe(audio_file, task='transcribe')
    if result and 'text' in result:
        return result['text']
    else:
        print(f"тЭМ Transcription failed for {audio_file}")
        return None


# Azure OpenAI API ржХрж▓
def generate_output_from_azure(transcribe, video_title, output_file_path):
    """Azure OpenAI API ржжрж┐ржпрж╝рзЗ рж╕рзНржкрж┐ржЪ ржЯрзЗржХрзНрж╕ржЯ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ ржПржмржВ ржЖржЙржЯржкрзБржЯ рж╕рзЗржн ржХрж░рж╛"""
    
    # ржкрзНрж░ржорзНржкржЯ рждрзИрж░рж┐
    prompt = f"""
    Here is my transcribe: {transcribe}
    Topic: "{video_title}"
    
    Write 1 Youtube relevent Video Title, Must engaging. 
    Write 2 paragraphs based on transcribe and title.
    Write 10 hashtags.
    Write 10 normal tags with comma separation.

    And After this, write this also:

    ЁЯОд Speakers in this video: 
    Tony Robbins

    ЁЯФК Our speeches are created by, remixed or licensed to Tony Robbins Motivation.
    For licensing information, message geniusteam01@gmail.com

    ЁЯОе The video footage in this video:
    All video footage used is licensed through either CC-BY, from various stock footage websites, or filmed by us. All Creative Commons footage is listed at the video's end and licensed under CC-BY 3.0. Film and TV shows used in the video are interwoven with the video's narrative, related to the video's topic, and corresponding to FAIR USE.
    """
    
    # API Key ржПржмржВ Endpoint ржерзЗржХрзЗ API URL рж╕рзЗржЯ ржХрж░рзБржи
    api_key = os.getenv("API_KEY")  # ржЖржкржирж╛рж░ Azure OpenAI API Key 
    url = f'{endpoint}/openai/deployments/{deployment}/chat/completions?api-version=2024-02-15-preview'

    headers = {
        'Content-Type': 'application/json',
        'api-key': api_key  # API Key
    }

    payload = {
        "messages": [
            {"role": "system", "content": "You are an AI assistant that helps people find information."},
            {"role": "user", "content": prompt}  # ржПржЦрж╛ржирзЗ prompt ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗржЫрж┐
        ],
        "max_tokens": 1500,
        "temperature": 0.7
    }

    try:
        response = requests.post(url, headers=headers, data=json.dumps(payload))

        if response.status_code == 200:
            data = response.json()
            result = data['choices'][0]['message']['content'].strip()  # рж╕ржарж┐ржХ ржЯрзЗржХрзНрж╕ржЯ ржпрж╛ржЪрж╛ржЗ
            print(f"тЬЕ Response received: {result[:200]}...")  # ржЖржВрж╢рж┐ржХ ржЖржЙржЯржкрзБржЯ
        else:
            print(f"тЭМ API Response Error: {response.status_code}, {response.text}")
            return

        # ржЖржЙржЯржкрзБржЯ ржлрж╛ржЗрж▓ рж╕рзЗржн ржХрж░рзБржи
        with open(output_file_path, "w", encoding="utf-8") as file:
            file.write(result)
            print(f"тЬЕ Output saved to: {output_file_path}")

    except Exception as e:
        print(f"тЭМ Error generating output from Azure OpenAI: {e}")
        print("тЪая╕П Skipping Azure process and continuing with the next steps...")


def process_audio_and_generate_text(audio_file, video_title, is_short=False):
    """рж╕рзНржкрж┐ржЪ ржЯрзБ ржЯрзЗржХрзНрж╕ржЯ ржкрзНрж░рж╕рзЗрж╕ ржПржмржВ Azure OpenAI ржПрж░ ржорж╛ржзрзНржпржорзЗ ржЖржЙржЯржкрзБржЯ рждрзИрж░рж┐ ржХрж░рж╛"""
    
    # Whisper ржПрж░ ржорж╛ржзрзНржпржорзЗ ржЕржбрж┐ржУ ржерзЗржХрзЗ ржЯрзНрж░рж╛ржирзНрж╕ржХрзНрж░рж┐ржкрзНржЯ ржХрж░рж╛
    transcribe = transcribe_audio(audio_file)

    if not transcribe:
        return
    
    # рж╕рзЗржирж┐ржЯрж╛ржЗржЬ ржХрж░рж╛ ржлрж╛ржЗрж▓ ржирж╛ржо ржерзЗржХрзЗ ржЕрж░рж┐ржЬрж┐ржирж╛рж▓ ржлрж╛ржЗрж▓ ржирж╛ржо ржЦрзБржБржЬрзБржи
    original_folder_name = get_original_basename(audio_file)
    sanitized_folder_name = os.path.splitext(os.path.basename(audio_file))[0]
    
    # ржпржжрж┐ ржЕрж░рж┐ржЬрж┐ржирж╛рж▓ ржлрзЛрж▓рзНржбрж╛рж░ ржирж╛ржо ржирж╛ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝, рждрж╛рж╣рж▓рзЗ рж╕рзЗржирж┐ржЯрж╛ржЗржЬ ржХрж░рж╛ ржирж╛ржо ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
    if not original_folder_name:
        original_folder_name = sanitized_folder_name
    
    # ржЕрж░рж┐ржЬрж┐ржирж╛рж▓ ржлрж╛ржЗрж▓ ржирж╛ржо ржЕржирзБржпрж╛ржпрж╝рзА ржлрзЛрж▓рзНржбрж╛рж░ рждрзИрж░рж┐ ржХрж░рзБржи
    if is_short:
        video_folder = os.path.join(OUTPUT_FOLDER, "shorts", original_folder_name)  # Shorts folder
    else:
        video_folder = os.path.join(OUTPUT_FOLDER, original_folder_name)  # Regular video folder

    os.makedirs(video_folder, exist_ok=True)

    # ржнрж┐ржбрж┐ржУ ржЯрж╛ржЗржЯрзЗрж▓ ржЕржирзБржпрж╛ржпрж╝рзА ржЖржЙржЯржкрзБржЯ ржлрж╛ржЗрж▓ ржирж╛ржо рждрзИрж░рж┐ ржХрж░рж╛ (рж╕рзЗржирж┐ржЯрж╛ржЗржЬ ржХрж░рж╛ ржирж╛ржо ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ)
    output_file_path = os.path.join(video_folder, f"{sanitized_folder_name}_output.txt")

    # Azure OpenAI API ржжрж┐ржпрж╝рзЗ ржЖржЙржЯржкрзБржЯ рждрзИрж░рж┐ ржХрж░рж╛
    generate_output_from_azure(transcribe, video_title, output_file_path)
    
    # Save video to the same folder (ржПржЯрж┐ create_video ржлрж╛ржВрж╢ржирзЗржЗ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ)
    print(f"тЬЕ Video and text saved to: {video_folder}")


# ржлрж╛ржЗрж▓ ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЯрзНрж░рзНржпрж╛ржХрж┐ржВ рж░рж╛ржЦрж╛рж░ ржЬржирзНржп ржбрж┐ржХрж╢ржирж╛рж░рж┐
file_usage_count = {}

def get_random_file(folder_path, extensions=(".mp4", ".mov", ".mp3", ".wav")):
    """ржлрзЛрж▓рзНржбрж╛рж░ ржерзЗржХрзЗ рж╕ржмржЪрзЗржпрж╝рзЗ ржХржо ржмрзНржпржмрж╣рзГржд ржлрж╛ржЗрж▓ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзЗред"""
    global file_usage_count
    
    print(f"ЁЯФН Checking folder: {folder_path}")
    if not os.path.isdir(folder_path):
        print(f"тЭМ Folder does not exist: {folder_path}")
        return None
        
    file_list = [f for f in glob(os.path.join(folder_path, "*")) if f.lower().endswith(extensions)]
    
    print(f"ЁЯУЛ Found {len(file_list)} files with extensions {extensions}")
    print(f"ЁЯУД Files: {[os.path.basename(f) for f in file_list]}")
    
    if not file_list:
        print(f"тЭМ No matching files found in folder")
        return None
    
    # рж╕ржм ржлрж╛ржЗрж▓рзЗрж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж╛ржЙржирзНржЯ ржЪрзЗржХ ржХрж░рзБржи
    # ржпржжрж┐ ржлрж╛ржЗрж▓ ржЖржЧрзЗ ржмрзНржпржмрж╣рж╛рж░ ржирж╛ рж╣ржпрж╝рзЗ ржерж╛ржХрзЗ, рждрж╛рж░ ржХрж╛ржЙржирзНржЯ 0 ржзрж░рзЗ ржирж┐ржи
    for file in file_list:
        if file not in file_usage_count:
            file_usage_count[file] = 0
    
    # рж╕ржмржЪрзЗржпрж╝рзЗ ржХржо ржмрзНржпржмрж╣рзГржд ржлрж╛ржЗрж▓ржЧрзБрж▓рж┐ ржЦрзБржБржЬрзБржи
    min_usage = min(file_usage_count[file] for file in file_list)
    least_used_files = [file for file in file_list if file_usage_count[file] == min_usage]
    
    # рж╕ржмржЪрзЗржпрж╝рзЗ ржХржо ржмрзНржпржмрж╣рзГржд ржлрж╛ржЗрж▓ржЧрзБрж▓рж┐ ржерзЗржХрзЗ рж░тАНрзНржпрж╛ржирзНржбржорж▓рж┐ ржПржХржЯрж┐ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи
    selected_file = random.choice(least_used_files)
    
    # ржирж┐рж░рзНржмрж╛ржЪрж┐ржд ржлрж╛ржЗрж▓рзЗрж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж╛ржЙржирзНржЯ ржмрж╛ржбрж╝рж╛ржи
    file_usage_count[selected_file] += 1
    
    print(f"тЬЕ Selected file: {os.path.basename(selected_file)} (used {file_usage_count[selected_file]} times)")
    
    return selected_file

# ржЖржЙржЯржкрзБржЯ ржнрж┐ржбрж┐ржУ ржлрж╛ржЗрж▓рзЗрж░ ржирж╛ржо рждрзИрж░рж┐ ржХрж░рждрзЗ ржлрж╛ржЗрж▓рзЗрж░ ржирж╛ржоржХрзЗ ржЕржбрж┐ржУ ржлрж╛ржЗрж▓рзЗрж░ ржирж╛ржо ржЕржирзБржпрж╛ржпрж╝рзА рж╕рзЗржЯ ржХрж░рзБржи
def get_output_filename(audio_file, is_short=False, prefix='', suffix=''):
    """
    ржЕржбрж┐ржУ ржлрж╛ржЗрж▓рзЗрж░ ржирж╛ржо ржЕржирзБржпрж╛ржпрж╝рзА ржЖржЙржЯржкрзБржЯ ржнрж┐ржбрж┐ржУ ржирж╛ржо рждрзИрж░рж┐ ржХрж░рзБржи, ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕ ржУ рж╕рж╛ржлрж┐ржХрзНрж╕ рж╕рж╣ред
    ржПржЦржи ржПржЯрж┐ ржЕрж░рж┐ржЬрж┐ржирж╛рж▓ ржлрж╛ржЗрж▓ржирж╛ржо ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржлрзЛрж▓рзНржбрж╛рж░ рждрзИрж░рж┐ ржХрж░рзЗред
    """
    # рж╕рзЗржирж┐ржЯрж╛ржЗржЬ ржХрж░рж╛ ржлрж╛ржЗрж▓ ржкрж╛рже ржерзЗржХрзЗ ржЕрж░рж┐ржЬрж┐ржирж╛рж▓ ржлрж╛ржЗрж▓ржирж╛ржо ржЦрзБржБржЬрзБржи
    original_audio_filename = get_original_basename(audio_file)
    # ржпржжрж┐ ржЕрж░рж┐ржЬрж┐ржирж╛рж▓ ржирж╛ржо ржирж╛ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝, рждрж╛рж╣рж▓рзЗ ржмрж░рзНрждржорж╛ржи ржлрж╛ржЗрж▓рзЗрж░ ржирж╛ржо ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
    if not original_audio_filename:
        original_audio_filename = os.path.splitext(os.path.basename(audio_file))[0]
    
    sanitized_audio_filename = os.path.splitext(os.path.basename(audio_file))[0]
    
    if prefix:
        sanitized_audio_filename = prefix + sanitized_audio_filename
    if suffix:
        sanitized_audio_filename = sanitized_audio_filename + suffix

    # ржЕрж╕рзНржерж╛ржпрж╝рзА ржлрж╛ржЗрж▓ ржкрж╛рже рж╣рж┐рж╕рж╛ржмрзЗ TEMP_FOLDER ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
    if is_short:
        output_filename = os.path.join(TEMP_FOLDER, f"{sanitized_audio_filename}_short.mp4")
    else:
        output_filename = os.path.join(TEMP_FOLDER, f"{sanitized_audio_filename}.mp4")
    
    return output_filename


def convert_srt_to_ass(srt_file, ass_file, is_short=False, position='bottom'):
    """Convert SRT subtitles to ASS format with premium styling and random color patterns."""
    """
    position ржПрж░ ржЕржкрж╢ржи рж╣рждрзЗ ржкрж╛рж░рзЗ:
    - 'top'
    - 'bottom' (default)
    - 'left'
    - 'right'
    - 'center'
    """
    try:
        # ржлрж╛ржЗрж▓ржирж╛ржо ржПржХрзНрж╕ржЯрзНрж░рж╛ржХрзНржЯ ржХрж░рзБржи
        base_filename = os.path.basename(srt_file)
        
        print(f"\nЁЯОи Creating design for: {base_filename}")
        
        subs = pysubs2.load(srt_file, encoding="utf-8")
        
         # ржкржЬрж┐рж╢ржи ржЕржирзБржпрж╛ржпрж╝рзА alignment рж╕рзЗржЯ ржХрж░рзБржи
        if position == 'top':
            subs.styles["Default"].alignment = 8  # Top
        elif position == 'bottom':
            subs.styles["Default"].alignment = 2  # Bottom
        elif position == 'left':
            subs.styles["Default"].alignment = 4  # Left
        elif position == 'right':
            subs.styles["Default"].alignment = 6  # Right
        else:  # center
            subs.styles["Default"].alignment = 5  # Center
        
        # ржбрж┐ржЬрж╛ржЗржи ржЕрзНржпрж╛ржкрзНрж▓рж╛ржЗ ржХрж░рзБржи, ржлрж╛ржЗрж▓ржирж╛ржо ржкрж╛рж╕ ржХрж░рзБржи ржпрж╛рждрзЗ ржПржХржЗ ржлрж╛ржЗрж▓рзЗ рж╕ржмрж╕ржоржпрж╝ ржПржХржЗ ржбрж┐ржЬрж╛ржЗржи рж╣ржпрж╝
        subs = apply_design(subs, is_short, filename=base_filename)
        
        # ASS ржлрж╛ржЗрж▓ рж╣рж┐рж╕рзЗржмрзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзБржи
        subs.save(ass_file)
        print(f"тЬЕ Converted SRT to ASS with unique design: {ass_file}")
    except Exception as e:
        print(f"тЭМ Error converting subtitle to ASS: {e}")
        # ржлрж▓ржмрзНржпрж╛ржХ ржбрж┐ржЬрж╛ржЗржи
        try:
            subs = pysubs2.load(srt_file, encoding="utf-8")
            subs.styles["Default"].fontname = "Arial"
            subs.styles["Default"].fontsize = 24 if is_short else 30
            subs.styles["Default"].primarycolor = pysubs2.Color(255, 255, 255, 0)
            subs.styles["Default"].outlinecolor = pysubs2.Color(0, 0, 0, 0)
            subs.styles["Default"].backcolor = pysubs2.Color(0, 0, 0, 128)
            subs.styles["Default"].borderstyle = 3
            subs.styles["Default"].outline = 2
            subs.styles["Default"].shadow = 0
            subs.styles["Default"].alignment = 2
            subs.save(ass_file)
            print(f"тЬЕ Used fallback subtitle design: {ass_file}")
        except Exception as fallback_error:
            print(f"тЭМ Even fallback design failed: {fallback_error}")
            
def clear_temp_folder():
    """Clear temporary folder."""
    if os.path.exists(TEMP_FOLDER):
        shutil.rmtree(TEMP_FOLDER)
    os.makedirs(TEMP_FOLDER, exist_ok=True)

def shorten_filename(filename, length=10):
    """Shorten filenames to avoid issues with long paths."""
    base_name = os.path.splitext(os.path.basename(filename))[0]
    short_name = "_".join(base_name.split()[:length])
    return f"{short_name}_{''.join(random.choices(string.ascii_letters + string.digits, k=5))}"

def download_youtube_audio(url_file):
    """
    Download YouTube audio as MP3 and sanitize filenames.
    ржЖржкржбрзЗржЯрзЗржб: ржПрж░рж░ рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ ржпрзЛржЧ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ, ржПржХржЗрж╕рж╛ржерзЗ ржПржХрж╛ржзрж┐ржХ ржЗржЙржЯрж┐ржЙржм рж▓рж┐ржВржХрзЗ рж╕ржорж╕рзНржпрж╛ ржПржбрж╝рж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗред
    """
    if not os.path.isfile(url_file):
        print(f"тЭМ URL ржлрж╛ржЗрж▓ ржирзЗржЗ: {url_file}")
        return []
        
    # ржлрж╛ржЗрж▓ ржерзЗржХрзЗ URL ржЧрзБрж▓рзЛ рж▓рзЛржб ржХрж░рзБржи
    try:
        with open(url_file, "r", encoding="utf-8") as file:
            urls = [line.strip() for line in file.readlines() if line.strip()]
    except Exception as e:
        print(f"тЭМ URL ржлрж╛ржЗрж▓ ржкржбрж╝рждрзЗ рж╕ржорж╕рзНржпрж╛: {url_file} - {e}")
        return []
        
    if not urls:
        print(f"тЪая╕П URL ржлрж╛ржЗрж▓рзЗ ржХрзЛржирзЛ рж▓рж┐ржВржХ ржирзЗржЗ: {url_file}")
        return []

    print(f"ЁЯУЛ {len(urls)}ржЯрж┐ рж▓рж┐ржВржХ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ ржлрж╛ржЗрж▓ ржерзЗржХрзЗ: {url_file}")
    
    # рж╕ржлрж▓ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛ ржлрж╛ржЗрж▓ржЧрзБрж▓рзЛ рж╕ржВрж░ржХрзНрж╖ржгрзЗрж░ ржЬржирзНржп рж▓рж┐рж╕рзНржЯ
    downloaded_files = []
    
    # ржкрзНрж░рждрж┐ржЯрж┐ URL ржПржХрзЗ ржПржХрзЗ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рзБржи (ржПржХрж╕рж╛ржерзЗ рж╕ржмржЧрзБрж▓рзЛ ржХрж░рж▓рзЗ ржПрж░рж░ рж╣рждрзЗ ржкрж╛рж░рзЗ)
    for idx, url in enumerate(urls, 1):
        print(f"\nЁЯФД ржкрзНрж░рж╕рзЗрж╕рж┐ржВ URL {idx}/{len(urls)}: {url}")
        
        # ржПржЗ URL ржПрж░ ржЬржирзНржп ржЕрж╕рзНржерж╛ржпрж╝рзА ржлрзЛрж▓рзНржбрж╛рж░ рждрзИрж░рж┐ ржХрж░рзБржи
        temp_download_folder = os.path.join(TEMP_FOLDER, f"download_{int(time.time())}_{idx}")
        os.makedirs(temp_download_folder, exist_ok=True)
        
        # yt-dlp ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи 
        ydl_opts = {
            'format': 'bestaudio/best',
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }],
            'outtmpl': os.path.join(temp_download_folder, '%(title)s.%(ext)s'),
            'noplaylist': True,
            'quiet': False,
            'no_warnings': False
        }
        
        # ржПржЗ URL ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи
        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=False)
                video_title = info.get('title', f"video_{idx}")
                print(f"ЁЯОм ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ: {video_title}")
                ydl.download([url])
            
            # ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛ ржлрж╛ржЗрж▓ ржЦрзБржБржЬрзБржи
            temp_files = glob(os.path.join(temp_download_folder, "*.mp3"))
            
            if not temp_files:
                print(f"тЪая╕П ржбрж╛ржЙржирж▓рзЛржб рж╣ржпрж╝рзЗржЫрзЗ ржХрж┐ржирзНрждрзБ ржлрж╛ржЗрж▓ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐: {temp_download_folder}")
                continue
                
            # ржкрзНрж░ржержо ржлрж╛ржЗрж▓ ржирж┐ржи (рж╕рж╛ржзрж╛рж░ржгржд ржПржХржЯрж╛ржЗ ржерж╛ржХрзЗ)
            downloaded_file = temp_files[0]
            
            # ржлрж╛ржЗрж▓ ржЕржбрж┐ржУ ржлрзЛрж▓рзНржбрж╛рж░рзЗ ржорзБржн ржХрж░рзБржи ржПржмржВ ржирж╛ржо рж╕рзЗржирж┐ржЯрж╛ржЗржЬ ржХрж░рзБржи
            file_name = os.path.basename(downloaded_file)
            sanitized_name, original_name = sanitize_filename(file_name)
            
            # ржЕржбрж┐ржУ ржлрзЛрж▓рзНржбрж╛рж░рзЗ ржЖржЫрзЗ ржХрж┐ржирж╛ ржЪрзЗржХ ржХрж░рзБржи
            target_path = os.path.join(AUDIO_FOLDER, sanitized_name)
            if os.path.exists(target_path):
                print(f"тЪая╕П ржлрж╛ржЗрж▓ ржЗрждрж┐ржоржзрзНржпрзЗ ржмрж┐ржжрзНржпржорж╛ржи: {target_path}")
                # ржЗржЙржирж┐ржХ ржирж╛ржо рждрзИрж░рж┐ ржХрж░рзБржи
                base_name, ext = os.path.splitext(sanitized_name)
                sanitized_name = f"{base_name}_{int(time.time())}{ext}"
                target_path = os.path.join(AUDIO_FOLDER, sanitized_name)
                
            # ржлрж╛ржЗрж▓ ржорзБржн ржХрж░рзБржи
            try:
                shutil.move(downloaded_file, target_path)
                print(f"тЬЕ ржлрж╛ржЗрж▓ рж╕ржлрж▓ржнрж╛ржмрзЗ рж╕ржВрж░ржХрзНрж╖рж┐ржд рж╣ржпрж╝рзЗржЫрзЗ: {sanitized_name}")
                
                # ржорзНржпрж╛ржкрж┐ржВ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзБржи
                map_filename(original_name, target_path)
                downloaded_files.append(target_path)
                
            except Exception as e:
                print(f"тЭМ ржлрж╛ржЗрж▓ ржорзБржн ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
                
            # ржЕрж╕рзНржерж╛ржпрж╝рзА ржлрзЛрж▓рзНржбрж╛рж░ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рзБржи
            try:
                shutil.rmtree(temp_download_folder)
            except:
                pass
                
        except Exception as e:
            print(f"тЭМ URL ржбрж╛ржЙржирж▓рзЛржб ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: {url} - {e}")
            print("тЪая╕П ржПржЗ URL-ржЯрж┐ ржПржбрж╝рж┐ржпрж╝рзЗ ржкрж░ржмрж░рзНрждрзА URL ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
            
            # ржЕрж╕рзНржерж╛ржпрж╝рзА ржлрзЛрж▓рзНржбрж╛рж░ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рзБржи
            try:
                shutil.rmtree(temp_download_folder)
            except:
                pass
    
    print(f"тЬЕ ржорзЛржЯ {len(downloaded_files)}ржЯрж┐ ржлрж╛ржЗрж▓ рж╕ржлрж▓ржнрж╛ржмрзЗ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ {url_file} ржерзЗржХрзЗ!")
    return downloaded_files


def load_processed_urls():
    """
    ржЗрждрж┐ржоржзрзНржпрзЗ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ URLs ржЧрзБрж▓рзЛ рж▓рзЛржб ржХрж░рзБржи
    """
    processed_urls = set()
    if os.path.exists(LOG_FILE):
        try:
            with open(LOG_FILE, 'r', encoding='utf-8') as f:
                processed_urls = set(line.strip() for line in f if line.strip())
        except Exception as e:
            print(f"тЭМ рж▓ржЧ ржлрж╛ржЗрж▓ ржкржбрж╝рждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
    return processed_urls

def save_processed_url(url):
    """
    URL ржХрзЗ log ржлрж╛ржЗрж▓рзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзБржи
    """
    try:
        with open(LOG_FILE, 'a', encoding='utf-8') as f:
            f.write(f"{url}\n")
        print(f"тЬЕ URL рж▓ржЧ ржлрж╛ржЗрж▓рзЗ рж╕ржВрж░ржХрзНрж╖рж┐ржд рж╣ржпрж╝рзЗржЫрзЗ: {url}")
    except Exception as e:
        print(f"тЭМ URL рж▓ржЧ ржлрж╛ржЗрж▓рзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")

def remove_url_from_file(url, file_path):
    """
    URL ржЯрж┐ржХрзЗ ржорзВрж▓ URL ржлрж╛ржЗрж▓ ржерзЗржХрзЗ ржорзБржЫрзЗ ржжрж┐ржи
    """
    try:
        # ржлрж╛ржЗрж▓ ржкржбрж╝рзБржи
        with open(file_path, 'r', encoding='utf-8') as f:
            urls = f.readlines()
        
        # URL ржмрж╛ржж ржжрж┐ржи (рж╕рзНржЯрзНрж░рж┐ржВржпрж╝рзЗрж░ ржорж╛ржЭрзЗрж░ рж╕рзНржкрзЗрж╕ ржПржмржВ рж▓рж╛ржЗржи ржмрзНрж░рзЗржХ ржЯрзНрж░рж┐ржо ржХрж░рзЗ)
        urls = [u for u in urls if u.strip() != url.strip()]
        
        # ржлрж╛ржЗрж▓рзЗ ржЖржмрж╛рж░ рж▓рж┐ржЦрзБржи
        with open(file_path, 'w', encoding='utf-8') as f:
            f.writelines(urls)
        
        print(f"тЬЕ URL ржорзБржЫрзЗ ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗ: {url}")
    except Exception as e:
        print(f"тЭМ URL ржорзБржЫрждрзЗ рж╕ржорж╕рзНржпрж╛: {url} - {e}")

def process_all_url_files():
    """
    URL ржлрж╛ржЗрж▓ржЧрзБрж▓рзЛ 1 by 1 ржкрзНрж░рж╕рзЗрж╕ ржХрж░ржмрзЗ
    """
    # ржЗрждрж┐ржоржзрзНржпрзЗ ржкрзНрж░рж╕рзЗрж╕ржХрзГржд URLs рж▓рзЛржб ржХрж░рзБржи
    processed_urls = load_processed_urls()

    # URL ржлрж╛ржЗрж▓ржЧрзБрж▓рзЛ
    url_files = [
        YOUTUBE_SHORTS_WITH_FACE_URL_FILE,
        YOUTUBE_LONG_WITH_FACE_URL_FILE,
        YOUTUBE_SHORTS_WITH_FACE_AI_URL_FILE,
        YOUTUBE_LONG_WITH_FACE_AI_URL_FILE,
        YOUTUBE_AI_VOICE_SHORTS_URL_FILE,
        YOUTUBE_AI_VOICE_LONG_VIDEO_URL_FILE,
        YOUTUBE_URL_FILE,
        YOUTUBE_SHORTS_URL_FILE
    ]

    # ржкрзНрж░рждрж┐ржЯрж┐ URL ржлрж╛ржЗрж▓ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛
    for file_path in url_files:
        if not os.path.exists(file_path) or os.path.getsize(file_path) == 0:
            print(f"тЪая╕П ржлрж╛ржЗрж▓ ржЦрж╛рж▓рж┐ ржмрж╛ ржирзЗржЗ: {file_path}")
            continue

        # ржлрж╛ржЗрж▓ ржерзЗржХрзЗ URLs ржкржбрж╝рзБржи
        with open(file_path, 'r', encoding='utf-8') as f:
            urls = [line.strip() for line in f if line.strip()]

        print(f"\nЁЯФН {file_path} ржерзЗржХрзЗ {len(urls)}ржЯрж┐ URL ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ")

        # URLs ржЧрзБрж▓рзЛ 1 by 1 ржкрзНрж░рж╕рзЗрж╕ ржХрж░рзБржи
        for url in urls:
            # ржЗрждрж┐ржоржзрзНржпрзЗ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ ржХрж┐ржирж╛ ржЪрзЗржХ ржХрж░рзБржи
            if url in processed_urls:
                print(f"тПй URL ржЗрждрж┐ржоржзрзНржпрзЗ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ: {url}")
                continue

            # URL ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи ржирж┐рж░рзНржзрж╛рж░ржг
            is_short = file_path in [
                YOUTUBE_SHORTS_WITH_FACE_URL_FILE, 
                YOUTUBE_SHORTS_WITH_FACE_AI_URL_FILE, 
                YOUTUBE_AI_VOICE_SHORTS_URL_FILE, 
                YOUTUBE_SHORTS_URL_FILE
            ]

            use_ai_voice = file_path in [
                YOUTUBE_SHORTS_WITH_FACE_AI_URL_FILE, 
                YOUTUBE_LONG_WITH_FACE_AI_URL_FILE, 
                YOUTUBE_AI_VOICE_SHORTS_URL_FILE, 
                YOUTUBE_AI_VOICE_LONG_VIDEO_URL_FILE
            ]

            use_face_footage = file_path in [
                YOUTUBE_SHORTS_WITH_FACE_URL_FILE, 
                YOUTUBE_LONG_WITH_FACE_URL_FILE, 
                YOUTUBE_SHORTS_WITH_FACE_AI_URL_FILE, 
                YOUTUBE_LONG_WITH_FACE_AI_URL_FILE
            ]

            print(f"\n===== URL ржкрзНрж░рж╕рзЗрж╕рж┐ржВ: {url} =====")
            print(f"тЪЩя╕П ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи: рж╢рж░рзНржЯрж╕={is_short}, AI ржнржпрж╝рзЗрж╕={use_ai_voice}, ржлрзЗрж╕ ржлрзБржЯрзЗржЬ={use_face_footage}")

            # URL ржлрж╛ржЗрж▓ рждрзИрж░рж┐ ржХрж░рзЗ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рзБржи
            temp_url_file = os.path.join(BASE_PATH, f"temp_url_{int(time.time())}.txt")
            with open(temp_url_file, 'w', encoding='utf-8') as f:
                f.write(url)

            try:
                # ржбрж╛ржЙржирж▓рзЛржб ржПржмржВ ржкрзНрж░рж╕рзЗрж╕
                audio_files = download_youtube_audio(temp_url_file)
                
                if not audio_files:
                    print(f"тЭМ {url} ржерзЗржХрзЗ ржХрзЛржирзЛ ржЕржбрж┐ржУ ржлрж╛ржЗрж▓ ржбрж╛ржЙржирж▓рзЛржб рж╣ржпрж╝ржирж┐")
                    
                    # URL ржХрзЗ log ржлрж╛ржЗрж▓рзЗ ржпрзЛржЧ ржХрж░рзБржи
                    save_processed_url(url)
                    
                    # URL ржЯрж┐ржХрзЗ ржорзВрж▓ ржлрж╛ржЗрж▓ ржерзЗржХрзЗ ржорзБржЫрзЗ ржжрж┐ржи
                    remove_url_from_file(url, file_path)
                    
                    # ржЯрзЗржорзНржкрж░рж╛рж░рж┐ URL ржлрж╛ржЗрж▓ ржорзБржЫрзЗ ржжрж┐ржи
                    os.remove(temp_url_file)
                    
                    continue

                print(f"тЬЕ {len(audio_files)}ржЯрж┐ ржЕржбрж┐ржУ ржлрж╛ржЗрж▓ ржбрж╛ржЙржирж▓рзЛржб рж╕ржорзНржкржирзНржи рж╣ржпрж╝рзЗржЫрзЗ")

                # ржкрзНрж░рждрж┐ржЯрж┐ ржЕржбрж┐ржУ ржлрж╛ржЗрж▓ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рзБржи
                for audio_file in audio_files:
                    video_title = os.path.splitext(os.path.basename(audio_file))[0]
                    print(f"\nЁЯО╡ ржЕржбрж┐ржУ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ: {video_title}")

                    # ржнрж┐ржбрж┐ржУ рждрзИрж░рж┐
                    success = process_audio_in_parallel(
                        audio_file, 
                        is_short=is_short, 
                        use_ai_voice=use_ai_voice, 
                        use_face_footage=use_face_footage
                    )

                    if success:
                        print(f"тЬЕ рж╕ржлрж▓ржнрж╛ржмрзЗ ржнрж┐ржбрж┐ржУ рждрзИрж░рж┐ рж╣ржпрж╝рзЗржЫрзЗ: {video_title}")
                        
                        # URL ржХрзЗ log ржлрж╛ржЗрж▓рзЗ ржпрзЛржЧ ржХрж░рзБржи
                        save_processed_url(url)
                        
                        # URL ржЯрж┐ржХрзЗ ржорзВрж▓ ржлрж╛ржЗрж▓ ржерзЗржХрзЗ ржорзБржЫрзЗ ржжрж┐ржи
                        remove_url_from_file(url, file_path)
                    else:
                        print(f"тЭМ ржнрж┐ржбрж┐ржУ рждрзИрж░рж┐ ржХрж░рждрзЗ ржмрзНржпрж░рзНрже: {video_title}")

                # ржЯрзЗржорзНржкрж░рж╛рж░рж┐ URL ржлрж╛ржЗрж▓ ржорзБржЫрзЗ ржжрж┐ржи
                os.remove(temp_url_file)

            except Exception as e:
                print(f"тЭМ URL ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржПрж░рж░: {url} - {e}")
                
                # URL ржХрзЗ log ржлрж╛ржЗрж▓рзЗ ржпрзЛржЧ ржХрж░рзБржи
                save_processed_url(url)
                
                # URL ржЯрж┐ржХрзЗ ржорзВрж▓ ржлрж╛ржЗрж▓ ржерзЗржХрзЗ ржорзБржЫрзЗ ржжрж┐ржи
                remove_url_from_file(url, file_path)
                
                # ржЯрзЗржорзНржкрж░рж╛рж░рж┐ URL ржлрж╛ржЗрж▓ ржорзБржЫрзЗ ржжрж┐ржи
                os.remove(temp_url_file)

    print("\nЁЯОЙ рж╕ржм URL ржлрж╛ржЗрж▓ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ рж╕ржорзНржкржирзНржи!")
# remove_background_music ржлрж╛ржВрж╢ржиржЯрж┐ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзБржи
def remove_background_music(input_audio, output_audio, temp_folder):
    """
    Spleeter ржжрж┐ржпрж╝рзЗ ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб ржорж┐ржЙржЬрж┐ржХ ржерзЗржХрзЗ ржнржпрж╝рзЗрж╕ ржЖрж▓рж╛ржжрж╛ ржХрж░рзЗред 
    ржпржжрж┐ Spleeter ржЗржирж╕рзНржЯрж▓ ржирж╛ ржерж╛ржХрзЗ ржмрж╛ ржмрзНржпрж░рзНрже рж╣ржпрж╝, рждрж╛рж╣рж▓рзЗ FFmpeg ржлрж┐рж▓рзНржЯрж╛рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗред
    """
    try:
        print(f"ЁЯФК Processing audio file to separate voice from background: {input_audio}")
        
        # ржЕржбрж┐ржУрж░ ржжрзИрж░рзНржШрзНржп ржЪрзЗржХ ржХрж░рзБржи
        duration_cmd = f'ffprobe -i "{input_audio}" -show_entries format=duration -v quiet -of csv="p=0"'
        try:
            duration = float(subprocess.check_output(duration_cmd, shell=True).decode().strip())
            print(f"Audio duration: {duration} seconds ({duration/60:.2f} minutes)")
        except:
            print("Could not determine audio duration")

        # Spleeter ржЯрзЗржорзНржк ржбрж┐рж░рзЗржХрзНржЯрж░рж┐
        spleeter_output = os.path.join(temp_folder, "spleeter_output")
        os.makedirs(spleeter_output, exist_ok=True)
        
        # ржкрзНрж░ржержорзЗ Spleeter ржжрж┐ржпрж╝рзЗ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи
        try:
            # Spleeter ржХржорж╛ржирзНржб ржЪрж╛рж▓рж╛ржи
            spleeter_cmd = f'spleeter separate -o "{spleeter_output}" -p spleeter:2stems "{input_audio}"'
            
            # Spleeter ржПрж░ ржкрж░рзЗ ржЕрждрж┐рж░рж┐ржХрзНржд ржкрзЛрж╕рзНржЯ-ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржпрзЛржЧ ржХрж░рзБржи:
            enhance_cmd = (
                f'ffmpeg -i "{vocals_path}" -af "equalizer=f=1000:width_type=o:width=1:g=2,' 
                f'equalizer=f=3000:width_type=o:width=1:g=3,' 
                f'equalizer=f=6000:width_type=o:width=1:g=1,' 
                f'loudnorm=I=-14:TP=-1.5:LRA=11,' 
                f'volume=1.2" '
                f'-c:a pcm_s24le -ar 48000 "{output_audio}" -y'
            )
            
            print("Running Spleeter for voice separation...")
            subprocess.run(spleeter_cmd, shell=True, timeout=300)  # 5 ржорж┐ржирж┐ржЯ ржЯрж╛ржЗржоржЖржЙржЯ
            
            # Spleeter ржЖржЙржЯржкрзБржЯ ржкрж╛рже - ржЕржбрж┐ржУ ржирж╛ржо ржЕржирзБржпрж╛ржпрж╝рзА ржлрзЛрж▓рзНржбрж╛рж░ рждрзИрж░рж┐ ржХрж░рзЗ
            audio_name = os.path.splitext(os.path.basename(input_audio))[0]
            vocals_path = os.path.join(spleeter_output, audio_name, "vocals.wav")
            
            if os.path.exists(vocals_path):
                # ржнржпрж╝рзЗрж╕ ржХрзЛржпрж╝рж╛рж▓рж┐ржЯрж┐ ржЙржирзНржиржд ржХрж░рзБржи
                enhance_cmd = (
                    f'ffmpeg -i "{vocals_path}" -af "volume=1.5, ' 
                    f'compand=attacks=0.01:decays=0.1:points=-80/-80|-45/-45|-27/-25|-15/-10|-5/-2|0/0|20/8" '
                    f'-c:a pcm_s16le "{output_audio}" -y'
                )
                subprocess.run(enhance_cmd, shell=True)
                print(f"тЬЕ Successfully separated and enhanced vocals using Spleeter")
                return
            else:
                print(f"тЪая╕П Spleeter output file not found: {vocals_path}")
                raise FileNotFoundError(f"Spleeter output file not found: {vocals_path}")
                
        except Exception as spleeter_error:
            print(f"тЪая╕П Spleeter failed or not installed: {spleeter_error}")
            print("Falling back to FFmpeg filters for voice enhancement...")
        
        # ржпржжрж┐ Spleeter ржмрзНржпрж░рзНрже рж╣ржпрж╝, рждрж╛рж╣рж▓рзЗ FFmpeg ржлрж┐рж▓рзНржЯрж╛рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
        # ржЙржирзНржиржд FFmpeg ржЕржбрж┐ржУ ржлрж┐рж▓рзНржЯрж╛рж░
        audio_filter = (
            "highpass=f=60, " +           # ржирж┐ржЪрзБ ржЖржУржпрж╝рж╛ржЬ ржмрж╛ржж ржжрж┐ржи
            "lowpass=f=12000, " +          # ржЙржЪрзНржЪ ржЖржУржпрж╝рж╛ржЬ ржмрж╛ржж ржжрж┐ржи
            "volume=1.5, " +              # ржнрж▓рж┐ржЙржо ржмрж╛ржбрж╝рж╛ржи
            "compand=attacks=0.02:decays=0.2:" +  # ржбрж╛ржЗржирж╛ржорж┐ржХ ржХржорзНржкрзНрж░рзЗрж╢ржи
            "points=-70/-70|-40/-40|-25/-24|-15/-12|-5/-5|0/0|15/7"
        )
        
        ffmpeg_cmd = (
            f'ffmpeg -i "{input_audio}" -af "{audio_filter}" '
            f'-c:a pcm_s24le -ar 48000 "{output_audio}" -y'  # ржЗржорзНржкрзНрж░рзБржнржб ржмрж┐ржЯ ржбрзЗржкрже ржУ рж╕рзНржпрж╛ржорзНржкрж▓рж┐ржВ рж░рзЗржЯ
        )
        print(f"Running FFmpeg audio enhancement command...")
        subprocess.run(ffmpeg_cmd, shell=True)
        
        # ржЖржЙржЯржкрзБржЯ ржлрж╛ржЗрж▓ ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи
        if os.path.exists(output_audio):
            try:
                out_duration = float(subprocess.check_output(
                    f'ffprobe -i "{output_audio}" -show_entries format=duration -v quiet -of csv="p=0"',
                    shell=True
                ).decode().strip())
                print(f"тЬЕ Enhanced audio duration: {out_duration} seconds ({out_duration/60:.2f} minutes)")
            except:
                print("Could not determine output audio duration")
            
            print(f"тЬЕ Speech enhanced using FFmpeg filters: {output_audio}")
        else:
            print(f"тЭМ Output file not created: {output_audio}")
            # ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржмрзНржпрж░рзНрже рж╣рж▓рзЗ, рж╕рж╛ржзрж╛рж░ржг ржХржкрж┐ ржХрж░рзБржи
            shutil.copy2(input_audio, output_audio)
            print(f"тЬЕ Copied original file as fallback: {output_audio}")
            
    except Exception as e:
        print(f"тЭМ Error processing audio: {e}")
        # рж╕ржмржХрж┐ржЫрзБ ржмрзНржпрж░рзНрже рж╣рж▓рзЗ рж╕рж╛ржзрж╛рж░ржг ржХржкрж┐ ржХрж░рзБржи
        try:
            shutil.copy2(input_audio, output_audio)
            print(f"тЬЕ File copied as fallback: {output_audio}")
        except Exception as copy_error:
            print(f"тЭМ Even fallback copy failed: {copy_error}")

def process_long_audio_with_chunked_transcription(audio_file, audio_temp_folder):
    """
    ржжрзАрж░рзНржШ ржЕржбрж┐ржУ ржлрж╛ржЗрж▓ржХрзЗ ржЪрж╛ржВржХрзЗ ржнрж╛ржЧ ржХрж░рзЗ, ржкрзНрж░рждрж┐ржЯрж┐ ржЪрж╛ржВржХрзЗрж░
    1. ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб ржорж┐ржЙржЬрж┐ржХ рж░рж┐ржорзБржн ржХрж░рзЗ
    2. ржкрзНрж░рждрж┐ржЯрж┐ ржЪрж╛ржВржХ ржЖрж▓рж╛ржжрж╛ржнрж╛ржмрзЗ ржЯрзНрж░рж╛ржирзНрж╕ржХрзНрж░рж╛ржЗржм ржХрж░рзЗ
    3. рж╕ржм ржЯрзНрж░рж╛ржирзНрж╕ржХрзНрж░рж┐ржкрзНржЯ ржПржХрждрзНрж░рж┐ржд ржХрж░рзЗ
    4. ржПржХрждрзНрж░рж┐ржд ржЯрзНрж░рж╛ржирзНрж╕ржХрзНрж░рж┐ржкрзНржЯ ржерзЗржХрзЗ AI ржнржпрж╝рзЗрж╕ рждрзИрж░рж┐ ржХрж░рзЗ
    
    ржПржЯрж┐ рж╢рзБржзрзБржорж╛рждрзНрж░ AI ржнржпрж╝рзЗрж╕ ржлрж┐ржЪрж╛рж░рзЗрж░ ржЬржирзНржп ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
    
    Returns:
        str: AI ржнржпрж╝рзЗрж╕ ржЕржбрж┐ржУ ржлрж╛ржЗрж▓рзЗрж░ ржкрж╛рже, ржмрзНржпрж░рзНрже рж╣рж▓рзЗ None
    """
    audio_name = os.path.splitext(os.path.basename(audio_file))[0]
    
    # ржЕржбрж┐ржУ ржжрзИрж░рзНржШрзНржп ржЪрзЗржХ ржХрж░рзБржи
    try:
        duration_cmd = f'ffprobe -i "{audio_file}" -show_entries format=duration -v quiet -of csv="p=0"'
        audio_duration = float(subprocess.check_output(duration_cmd, shell=True).decode().strip())
        print(f"ЁЯУК Audio duration: {audio_duration:.2f}s ({audio_duration/60:.2f} minutes)")
        
        # 10 ржорж┐ржирж┐ржЯрзЗрж░ ржХржо рж╣рж▓рзЗ ржЪрж╛ржВржХрж┐ржВ ржкрзНрж░ржпрж╝рзЛржЬржи ржирзЗржЗ
        if audio_duration <= 600:
            print(f"тЬЕ Audio is shorter than 10 minutes, processing without chunking")
            filtered_audio = os.path.join(audio_temp_folder, f"{audio_name}_filtered.wav")
            remove_background_music(audio_file, filtered_audio, audio_temp_folder)
            
            # рж╕ржорзНржкрзВрж░рзНржг ржлрж╛ржЗрж▓ ржЯрзНрж░рж╛ржирзНрж╕ржХрзНрж░рж╛ржЗржм ржХрж░рзБржи
            transcript = transcribe_audio(filtered_audio)
            
            if transcript:
                print(f"тЬЕ Transcription successful: {len(transcript.split())} words")
                ai_voice_file = transcribe_and_generate_ai_voice(transcript, audio_name, audio_temp_folder)
                
                if ai_voice_file and os.path.exists(ai_voice_file):
                    print(f"тЬЕ Using AI voice: {ai_voice_file}")
                    return ai_voice_file
            
            return None
        
        # ржПржЦрж╛ржирзЗ ржЕржбрж┐ржУ ржЪрж╛ржВржХрж┐ржВ ржХрж░рж╛ рж╣ржмрзЗ
        print("ЁЯФД Audio is longer than 10 minutes, using chunked transcription...")
        
        # ржЪрж╛ржВржХ ржлрзЛрж▓рзНржбрж╛рж░ рждрзИрж░рж┐ ржХрж░рзБржи
        chunks_folder = os.path.join(audio_temp_folder, "chunks")
        os.makedirs(chunks_folder, exist_ok=True)
        
        # ржЙржирзНржиржд - ржЪрж╛ржВржХ рж╕рж╛ржЗржЬ ржХржорж┐ржпрж╝рзЗ ржЖржирзБржи ржЯрзНрж░рж╛ржирзНрж╕ржХрзНрж░рж┐ржкрж╢ржи ржПржХрзНржпрзБрж░рзЗрж╕рж┐рж░ ржЬржирзНржп
        chunk_size = 180  # 3 ржорж┐ржирж┐ржЯ (ржЖржЧрзЗрж░ ржерзЗржХрзЗ ржЖрж░ржУ ржХржо)
        
        # ржЪрж╛ржВржХ рж╕ржВржЦрзНржпрж╛ ржЧржгржирж╛
        num_chunks = math.ceil(audio_duration / chunk_size)
        print(f"ЁЯФк Splitting audio into {num_chunks} chunks of {chunk_size/60:.1f} minutes each")
        
        # ржкрзНрж░рждрж┐ржЯрж┐ ржЪрж╛ржВржХ рждрзИрж░рж┐, ржкрзНрж░рж╕рзЗрж╕, ржПржмржВ ржЯрзНрж░рж╛ржирзНрж╕ржХрзНрж░рж╛ржЗржм
        all_transcripts = []
        
        for i in range(num_chunks):
            start_time = i * chunk_size
            
            # рж╢рзЗрж╖ ржЪрж╛ржВржХрзЗрж░ ржЬржирзНржп ржпржжрж┐ ржмрж╛ржХрж┐ рж╕ржоржпрж╝ ржХржо ржерж╛ржХрзЗ
            if i == num_chunks - 1:
                duration = audio_duration - start_time
            else:
                duration = chunk_size
            
            print(f"\n--- Processing Chunk {i+1}/{num_chunks} (Duration: {duration:.1f}s) ---")
            
            # ржЪрж╛ржВржХ ржлрж╛ржЗрж▓ ржкрж╛рже
            chunk_file = os.path.join(chunks_folder, f"chunk_{i+1}.mp3")
            
            # ffmpeg ржжрж┐ржпрж╝рзЗ ржЪрж╛ржВржХ рждрзИрж░рж┐ - рж╕рж░рзНржмрзЛржЪрзНржЪ 3 ржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░ржмрзЗ
            max_attempts = 3
            chunk_success = False
            
            for attempt in range(max_attempts):
                try:
                    chunk_cmd = f'ffmpeg -i "{audio_file}" -ss {start_time} -t {duration} -c:a libmp3lame -q:a 2 "{chunk_file}" -y'
                    subprocess.run(chunk_cmd, shell=True, timeout=300)
                    
                    if os.path.exists(chunk_file) and os.path.getsize(chunk_file) > 1000:
                        chunk_success = True
                        print(f"тЬЕ Created chunk {i+1}/{num_chunks} (Attempt {attempt+1})")
                        break
                except Exception as e:
                    print(f"тЪая╕П Error creating chunk {i+1}, attempt {attempt+1}: {e}")
            
            if not chunk_success:
                print(f"тЭМ Failed to create chunk {i+1} after {max_attempts} attempts, skipping")
                continue
            
            # ржкрзНрж░рждрж┐ржЯрж┐ ржЪрж╛ржВржХрзЗрж░ ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб ржорж┐ржЙржЬрж┐ржХ рж░рж┐ржорзБржн ржХрж░рзБржи
            filtered_chunk = os.path.join(chunks_folder, f"chunk_{i+1}_filtered.wav")
            print(f"ЁЯФК Removing background from chunk {i+1}/{num_chunks}")
            
            # ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб рж░рж┐ржорзБржнрж╛рж▓ - рж╕рж░рзНржмрзЛржЪрзНржЪ 2 ржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛
            filter_success = False
            for attempt in range(2):
                try:
                    remove_background_music(chunk_file, filtered_chunk, chunks_folder)
                    
                    if os.path.exists(filtered_chunk) and os.path.getsize(filtered_chunk) > 1000:
                        filter_success = True
                        print(f"тЬЕ Filtered chunk {i+1}/{num_chunks} (Attempt {attempt+1})")
                        break
                except Exception as e:
                    print(f"тЪая╕П Error filtering chunk {i+1}, attempt {attempt+1}: {e}")
            
            # ржлрж┐рж▓рзНржЯрж╛рж░ ржмрзНржпрж░рзНрже рж╣рж▓рзЗ ржЕрж░рж┐ржЬрж┐ржирж╛рж▓ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
            if not filter_success:
                print(f"тЪая╕П Using original chunk without filtering for chunk {i+1}")
                # ржЕрж░рж┐ржЬрж┐ржирж╛рж▓ ржЪрж╛ржВржХ WAV ржлрж░ржорзНржпрж╛ржЯрзЗ ржХржиржнрж╛рж░рзНржЯ ржХрж░рзБржи
                wav_chunk = os.path.join(chunks_folder, f"chunk_{i+1}_original.wav")
                try:
                    convert_cmd = f'ffmpeg -i "{chunk_file}" -c:a pcm_s16le "{wav_chunk}" -y'
                    subprocess.run(convert_cmd, shell=True)
                    if os.path.exists(wav_chunk) and os.path.getsize(wav_chunk) > 0:
                        filtered_chunk = wav_chunk
                    else:
                        filtered_chunk = chunk_file
                except:
                    filtered_chunk = chunk_file
            
            # рзй. ржПржЦрж╛ржирзЗ ржкрзНрж░рждрж┐ржЯрж┐ ржЪрж╛ржВржХ ржЖрж▓рж╛ржжрж╛ ржЖрж▓рж╛ржжрж╛ ржЯрзНрж░рж╛ржирзНрж╕ржХрзНрж░рж╛ржЗржм ржХрж░рзБржи
            print(f"ЁЯОЩя╕П Transcribing chunk {i+1}/{num_chunks}...")
            chunk_transcript = transcribe_audio(filtered_chunk)
            
            if chunk_transcript:
                print(f"тЬЕ Chunk {i+1} transcription successful: {len(chunk_transcript.split())} words")
                # рж╢рзБрж░рзБрждрзЗ ржЪрж╛ржВржХ ржиржорзНржмрж░ ржпрзЛржЧ ржХрж░рзБржи - ржкрж░рзЗ ржбрж┐ржмрж╛ржЧрж┐ржВ ржПрж░ ржЬржирзНржп
                chunk_transcript = f"[Chunk {i+1}] {chunk_transcript}"
                all_transcripts.append(chunk_transcript)
            else:
                print(f"тЭМ Chunk {i+1} transcription failed")
        
        # ржпржжрж┐ ржХрзЛржирзЛ ржЪрж╛ржВржХ ржЯрзНрж░рж╛ржирзНрж╕ржХрзНрж░рж╛ржЗржм ржирж╛ рж╣ржпрж╝
        if not all_transcripts:
            print("тЭМ No chunks were successfully transcribed")
            return None
        
        # рзк. рж╕ржм ржЯрзНрж░рж╛ржирзНрж╕ржХрзНрж░рж┐ржкрзНржЯ ржПржХрждрзНрж░рж┐ржд ржХрж░рзБржи
        full_transcript = " ".join(all_transcripts)
        print(f"\nтЬЕ Combined all transcripts: {len(full_transcript.split())} words total")
        
        # ржЯрзНрж░рж╛ржирзНрж╕ржХрзНрж░рж┐ржкрзНржЯ ржлрж╛ржЗрж▓рзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзБржи (ржРржЪрзНржЫрж┐ржХ - ржбрж┐ржмрж╛ржЧрж┐ржВ ржПрж░ ржЬржирзНржп)
        transcript_file = os.path.join(audio_temp_folder, f"{audio_name}_transcript.txt")
        with open(transcript_file, "w", encoding="utf-8") as f:
            f.write(full_transcript)
        
        # рзл. AI ржнржпрж╝рзЗрж╕ ржЬрзЗржирж╛рж░рзЗржЯ ржХрж░рзБржи
        print(f"ЁЯОЩя╕П Generating AI voice from combined transcript...")
        ai_voice_file = transcribe_and_generate_ai_voice(full_transcript, audio_name, audio_temp_folder)
        
        if ai_voice_file and os.path.exists(ai_voice_file):
            print(f"тЬЕ AI voice generation successful: {ai_voice_file}")
            return ai_voice_file
        else:
            print(f"тЭМ AI voice generation failed")
            return None
        
    except Exception as e:
        print(f"тЭМ Error in chunked transcription process: {e}")
        return None

def split_into_chunks(result, words_per_line=5):
    """
    Whisper result ржбрзЗржЯрж╛ ржерзЗржХрзЗ (word_timestamps=True) ржкрзНрж░рждрж┐ржЯрж┐ ржУржпрж╝рж╛рж░рзНржб ржирж┐ржпрж╝рзЗ 
    ржЫрзЛржЯ ржЫрзЛржЯ ржЪрж╛ржЩрзНржХ (рж╕рж╛ржмржЯрж╛ржЗржЯрзЗрж▓ рж▓рж╛ржЗржи) рждрзИрж░рж┐ ржХрж░рзЗ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЗред
    """
    all_chunks = []
    current_words = []
    chunk_start_time = None
    chunk_end_time = None

    for seg in result["segments"]:
        for w in seg["words"]:
            if chunk_start_time is None:
                chunk_start_time = w["start"]
            chunk_end_time = w["end"]
            current_words.append(w["word"])

            if (len(current_words) >= words_per_line) or any(punct in w["word"] for punct in [".", "!", "?", ","]):
                text_line = " ".join(current_words).strip()
                all_chunks.append({
                    "start": chunk_start_time,
                    "end": chunk_end_time,
                    "text": text_line
                })
                current_words = []
                chunk_start_time = None
                chunk_end_time = None
    
    if current_words:
        text_line = " ".join(current_words).strip()
        all_chunks.append({
            "start": chunk_start_time,
            "end": chunk_end_time,
            "text": text_line
        })

    return all_chunks

def color_line_dynamically(line, color1="&HFFFF00&", color2="&HFFFFFF&", ratio=0.7):
    """
    line: ржорзВрж▓ ржЯрзЗржХрзНрж╕ржЯ (ржПржХржЯрж┐ рж╕рж╛ржмржЯрж╛ржЗржЯрзЗрж▓ рж▓рж╛ржЗржи)
    color1: ржкрзНрж░ржержо ржЕржВрж╢рзЗрж░ рж░ржЩ (ASS BGR format, ржЙржжрж╛рж╣рж░ржг: &H00FF00& = рж╕ржмрзБржЬ)
    color2: ржкрж░рзЗрж░ ржЕржВрж╢рзЗрж░ рж░ржЩ (ASS BGR format, ржЙржжрж╛рж╣рж░ржг: &HFFFF00& = ржирзАрж▓рж╛ржн рж╣рж▓рзБржж ржиржпрж╝)
    ratio: ржХржд рж╢рждрж╛ржВрж╢ рж╢ржмрзНржж color1 ржП ржерж╛ржХржмрзЗ (ржбрж┐ржлрж▓рзНржЯ 0.7 = 70%)
    """
    words = line.split()
    total_words = len(words)
    if total_words == 0:
        return line

    split_index = int(total_words * ratio)
    if split_index <= 0:
        return f"{{\\c{color2}}}{line}{{\\r}}"
    if split_index >= total_words:
        return f"{{\\c{color1}}}{line}{{\\r}}"

    part1 = words[:split_index]
    part2 = words[split_index:]
    text1 = " ".join(part1)
    text2 = " ".join(part2)
    return f"{{\\c{color1}}}{text1} {{\\c{color2}}}{text2}{{\\r}}"

def generate_subtitles(audio_file, subtitle_file, subtitle_format='srt'):
    """Generate smaller-chunk subtitles from audio file using word timestamps, with dynamic coloring and fade animation."""
    global model
    result = model.transcribe(audio_file, word_timestamps=True, task='transcribe')
    if not result or "segments" not in result or not result["segments"]:
        print(f"тЭМ Transcription failed or empty segments for: {audio_file}")
        with open(subtitle_file, "w", encoding="utf-8") as f:
            f.write("")
        return

    chunks = split_into_chunks(result, words_per_line=5)
    def format_timestamp(seconds):
        hours, remainder = divmod(int(seconds), 3600)
        minutes, secs = divmod(remainder, 60)
        millisecs = int((seconds % 1) * 1000)
        return f"{hours:02}:{minutes:02}:{secs:02},{millisecs:03}"

    fade_tag = r"{\fad(300,300)}"
    with open(subtitle_file, "w", encoding="utf-8") as f:
        for i, chunk in enumerate(chunks, start=1):
            start_ts = format_timestamp(chunk["start"])
            end_ts = format_timestamp(chunk["end"])
            text_line = chunk["text"]
            colored_text = color_line_dynamically(line=text_line, color1="&H00FF00&", color2="&HFFFFFF&", ratio=0.7)
            animated_text = fade_tag + colored_text
            if subtitle_format == 'srt':
                f.write(f"{i}\n{start_ts} --> {end_ts}\n{animated_text}\n\n")
            else:
                f.write(f"{animated_text}\n")
    print(f"тЬЕ Subtitles generated (chunked): {subtitle_file}")


def clear_audio_and_temp_folders(audio_file, temp_folder):
    """Delete specific audio file and its related temp files."""
    # Delete the specific audio file
    if os.path.isfile(audio_file):
        os.remove(audio_file)
        print(f"тЬЕ Deleted audio file: {audio_file}")

    # Identify temp folder specific to the audio file
    temp_audio_folder = os.path.join(temp_folder, os.path.splitext(os.path.basename(audio_file))[0])

    # Delete the folder and its contents
    if os.path.isdir(temp_audio_folder):
        shutil.rmtree(temp_audio_folder)
        print(f"тЬЕ Deleted temporary folder: {temp_audio_folder}")

def create_video(stock_video, audio_file, output_video, is_short=False, use_karaoke=True, temp_folder=None, use_ai_voice=False, use_face_footage=False):
    """
    ржнрж┐ржбрж┐ржУ рждрзИрж░рж┐ ржХрж░рзЗ:
      1. рж╕рзНржЯржХ ржнрж┐ржбрж┐ржУ рж▓рзБржк ржХрж░рзЗ (рж╕рзНржХрзЗрж▓/ржкрзНржпрж╛ржб ржпржжрж┐ рж╢рж░рзНржЯрж╕ рж╣ржпрж╝)
      2. ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб ржорж┐ржЙржЬрж┐ржХ ржорж┐ржХрзНрж╕ ржХрж░рж╛
      3. рж╕рж╛ржмржЯрж╛ржЗржЯрзЗрж▓ рждрзИрж░рж┐ (karaoke ржмрж╛ рж╕рж╛ржзрж╛рж░ржг, use_karaoke ржлрзНрж▓рзНржпрж╛ржЧ ржЕржирзБржпрж╛ржпрж╝рзА)
      4. ffmpeg ржжрж┐ржпрж╝рзЗ рж╕ржм ржорж╛рж░рзНржЬ ржХрж░рж╛
      
    ржпржжрж┐ use_ai_voice=True рж╣ржпрж╝, рждрж╛рж╣рж▓рзЗ Whisper ржжрж┐ржпрж╝рзЗ ржЯрзНрж░рж╛ржирзНрж╕ржХрзНрж░рж┐ржкрзНржЯ ржХрж░рзЗ AI ржнржпрж╝рзЗрж╕ ржЬрзЗржирж╛рж░рзЗржЯ ржХрж░ржмрзЗред
    ржпржжрж┐ use_face_footage=True рж╣ржпрж╝, рждрж╛рж╣рж▓рзЗ ржкрзНрж░ржержорзЗ ржлрзЗрж╕ ржлрзБржЯрзЗржЬ ржпрзЛржЧ ржХрж░ржмрзЗред
    """
    if not temp_folder:
        temp_folder = TEMP_FOLDER
    
    # рж╕рзЗржирж┐ржЯрж╛ржЗржЬ ржХрж░рж╛ ржЕржбрж┐ржУ ржлрж╛ржЗрж▓ ржерзЗржХрзЗ ржирж╛ржо ржирж┐ржи
    sanitized_folder_name = os.path.splitext(os.path.basename(audio_file))[0]
    # ржЕрж░рж┐ржЬрж┐ржирж╛рж▓ ржлрж╛ржЗрж▓ ржирж╛ржо ржЦрзБржБржЬрзБржи
    original_folder_name = get_original_basename(audio_file)
    
    # ржпржжрж┐ ржЕрж░рж┐ржЬрж┐ржирж╛рж▓ ржлрзЛрж▓рзНржбрж╛рж░ ржирж╛ржо ржирж╛ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝, рждрж╛рж╣рж▓рзЗ рж╕рзЗржирж┐ржЯрж╛ржЗржЬ ржХрж░рж╛ ржирж╛ржо ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
    if not original_folder_name:
        original_folder_name = sanitized_folder_name
    
    # ржлрзЛрж▓рзНржбрж╛рж░ рждрзИрж░рж┐ ржХрж░рзБржи ржЕрж░рж┐ржЬрж┐ржирж╛рж▓ ржирж╛ржо ржЕржирзБржпрж╛ржпрж╝рзА
    if is_short:
        video_folder = os.path.join(OUTPUT_FOLDER, "shorts", original_folder_name)  # Shorts folder
    else:
        video_folder = os.path.join(OUTPUT_FOLDER, original_folder_name)  # Regular video folder
    
    # ржнрж┐ржбрж┐ржУрж░ ржЬржирзНржп ржЗржЙржирж┐ржХ ржЯрзЗржорзНржк ржлрзЛрж▓рзНржбрж╛рж░
    video_specific_temp = os.path.join(temp_folder, f"{sanitized_folder_name}_{int(time.time())}")
    os.makedirs(video_specific_temp, exist_ok=True)
    
    # Make sure folder exists
    os.makedirs(video_folder, exist_ok=True)

    # Create video
    try:
        if is_short:
            random_stock = get_random_file(SHORTS_STOCK_VIDEOS_FOLDER, (".mp4", ".mov"))
            used_stock_video = random_stock if random_stock else stock_video
        else:
            random_stock = get_random_file(STOCK_VIDEOS_FOLDER, (".mp4", ".mov"))
            used_stock_video = random_stock if random_stock else stock_video

        print(f"ЁЯОм Creating video (is_short={is_short}, karaoke={use_karaoke}, ai_voice={use_ai_voice}, face_footage={use_face_footage}): {output_video} ...")
        
        # ржпржжрж┐ AI ржнржпрж╝рзЗрж╕ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ рж╣ржпрж╝
        if use_ai_voice:
            # Whisper ржжрж┐ржпрж╝рзЗ ржЯрзНрж░рж╛ржирзНрж╕ржХрзНрж░рж┐ржкрзНржЯ ржХрж░рзБржи
            print("ЁЯОЩя╕П Transcribing audio for AI voice generation...")
            transcript = transcribe_audio(audio_file)
            
            if transcript:
                # AI ржнржпрж╝рзЗрж╕ ржЬрзЗржирж╛рж░рзЗржЯ ржХрж░рзБржи
                ai_voice_file = transcribe_and_generate_ai_voice(transcript, sanitized_folder_name, video_specific_temp)
                
                if ai_voice_file and os.path.exists(ai_voice_file):
                    print(f"тЬЕ Using AI voice: {ai_voice_file}")
                    main_audio = ai_voice_file
                else:
                    print("тЭМ AI voice generation failed, using original audio")
                    main_audio = audio_file
            else:
                print("тЭМ Transcription failed, using original audio")
                main_audio = audio_file
        else:
            main_audio = audio_file
        
        # ржЕржбрж┐ржУ ржбрж┐ржЙрж░рзЗрж╢ржи ржЪрзЗржХ ржХрж░рзБржи
        audio_duration = float(
            subprocess.check_output(
                f'ffprobe -i "{main_audio}" -show_entries format=duration -v quiet -of csv="p=0"',
                shell=True
            ).decode().strip()
        )
        short_duration = min(audio_duration, 60) if is_short else audio_duration
        print(f"ЁЯУК Main audio duration: {short_duration:.2f}s")
        
        # ржлрзЗрж╕ ржлрзБржЯрзЗржЬ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ
        if use_face_footage:
            print("ЁЯОн Processing face footage with guaranteed timing method...")
            # ржлрзЗрж╕ ржлрзБржЯрзЗржЬ ржирж┐ржи (рж╕рж░рзНржмрзЛржЪрзНржЪ 5 рж╕рзЗржХрзЗржирзНржбрзЗрж░)
            face_footage = face_handler.get_random_face_footage(is_short=is_short, max_duration=5.0)
            
            if not face_footage or not os.path.exists(face_footage):
                print("тЪая╕П No face footage available or file does not exist, using only stock footage")
                use_face_footage = False
            else:
                try:
                    # ржПржХржЯрж┐ рж╕ржорзНржкрзВрж░рзНржг ржирждрзБржи ржкржжрзНржзрждрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛:
                    # 1. ржкрзНрж░ржержорзЗ ржПржоржи ржПржХржЯрж┐ ржнрж┐ржбрж┐ржУ рждрзИрж░рж┐ ржХрж░ржмрзЛ ржпрзЗржЯрж┐ рж╕рзНржЯржХ ржнрж┐ржбрж┐ржУрж░ рж▓рзБржкрж┐ржВ ржжрж┐ржпрж╝рзЗ ржкрзБрж░рзЛ ржЕржбрж┐ржУ ржжрзИрж░рзНржШрзНржп ржХржнрж╛рж░ ржХрж░рзЗ
                    # 2. рждрж╛рж░ржкрж░ ржнрж┐ржбрж┐ржУрж░ рж╢рзБрж░рзБрждрзЗ ржлрзЗрж╕ ржлрзБржЯрзЗржЬ ржмрж╕рж┐ржпрж╝рзЗ ржжрзЗржмрзЛ ржнрж┐ржбрж┐ржУ ржПржбрж┐ржЯрж┐ржВ ржкржжрзНржзрждрж┐рждрзЗ
                    # ржПрждрзЗ ржЯрж╛ржЗржорж┐ржВ рж╕ржорж╕рзНржпрж╛ ржПржбрж╝рж╛ржирзЛ ржпрж╛ржмрзЗ
                    
                    # рж╕рзНржЯрзЗржк 1: рж╕ржорзНржкрзВрж░рзНржг ржЕржбрж┐ржУ ржжрзИрж░рзНржШрзНржпрзЗрж░ ржЬржирзНржп рж╕рзНржЯржХ ржнрж┐ржбрж┐ржУ рждрзИрж░рж┐ ржХрж░рзБржи
                    full_stock_video = os.path.join(video_specific_temp, "full_stock.mp4")
                    
                    if is_short:
                        # рж╢рж░рзНржЯрж╕ ржнрж┐ржбрж┐ржУрж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ рж╕рзНржХрзЗрж▓ ржХрж░рзБржи
                        scale_filter = "scale=1080:1920:force_original_aspect_ratio=decrease,pad=1080:1920:(ow-iw)/2:(oh-ih)/2"
                        stock_cmd = (
                            f'ffmpeg -stream_loop -1 -i "{used_stock_video}" -t {short_duration} '
                            f'-vf "{scale_filter}" -c:v libx264 -an -preset ultrafast -crf 23 '
                            f'"{full_stock_video}" -y'
                        )
                    else:
                        # рж░рзЗржЧрзБрж▓рж╛рж░ ржнрж┐ржбрж┐ржУрж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ
                        stock_cmd = (
                            f'ffmpeg -stream_loop -1 -i "{used_stock_video}" -t {short_duration} '
                            f'-c:v libx264 -an -preset ultrafast -crf 23 "{full_stock_video}" -y'
                        )
                    
                    subprocess.run(stock_cmd, shell=True)
                    print(f"тЬЕ Created full-length stock video base")
                    
                    # рж╕рзНржЯрзЗржк 2: ржлрзЗрж╕ ржлрзБржЯрзЗржЬ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рзБржи (рж╕рзНржХрзЗрж▓, ржЖржХрж╛рж░ ржЗрждрзНржпрж╛ржжрж┐)
                    face_processed = os.path.join(video_specific_temp, "face_processed.mp4")
                    
                    # ржлрзЗрж╕ ржлрзБржЯрзЗржЬрзЗрж░ ржжрзИрж░рзНржШрзНржп ржЪрзЗржХ ржХрж░рзБржи
                    face_duration = float(
                        subprocess.check_output(
                            f'ffprobe -i "{face_footage}" -show_entries format=duration -v quiet -of csv="p=0"',
                            shell=True
                        ).decode().strip()
                    )
                    print(f"тЬЕ Face footage duration: {face_duration:.2f}s")
                    
                    # ржлрзЗрж╕ ржлрзБржЯрзЗржЬрзЗрж░ ржжрзИрж░рзНржШрзНржп рж╕рзАржорж┐ржд ржХрж░рзБржи (5 рж╕рзЗржХрзЗржирзНржбрзЗрж░ ржмрзЗрж╢рж┐ ржиржпрж╝)
                    face_duration = min(face_duration, 5.0)
                    
                    if is_short:
                        face_cmd = (
                            f'ffmpeg -i "{face_footage}" -t {face_duration} '
                            f'-vf "{scale_filter}" -c:v libx264 -an -preset ultrafast -crf 23 '
                            f'"{face_processed}" -y'
                        )
                    else:
                        face_cmd = (
                            f'ffmpeg -i "{face_footage}" -t {face_duration} '
                            f'-c:v libx264 -an -preset ultrafast -crf 23 "{face_processed}" -y'
                        )
                    
                    subprocess.run(face_cmd, shell=True)
                    print(f"тЬЕ Processed face footage (limited to {face_duration:.2f}s)")
                    
                    # рж╕рзНржЯрзЗржк 3: ржПржХржЯрж╛ 1-ржкрзНржпрж╛рж╕ ржХржорж╛ржирзНржбрзЗ ржнрж┐ржбрж┐ржУ ржПржбрж┐ржЯрж┐ржВржпрж╝рзЗрж░ ржорж╛ржзрзНржпржорзЗ ржпрзЛржЧ ржХрж░рзБржи
                    # overlay + enable=, seekable=1 ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржПржХржЯрж┐ ржлрзБрж▓ ржнрж┐ржбрж┐ржУ рждрзИрж░рж┐ ржХрж░ржмрзЛ
                    # ржПржЯрж╛ ржПржХржЗ FFmpeg ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржпрж╝ ржХрж░ржмрзЗ, ржпрж╛рждрзЗ рж╕рж┐ржЩрзНржХрж┐ржВ рж╕ржорж╕рзНржпрж╛ ржирж╛ рж╣ржпрж╝
                    
                    final_no_audio = os.path.join(video_specific_temp, "final_no_audio.mp4")
                    
                    # ржПржЦрж╛ржирзЗ overlay ржлрж┐рж▓рзНржЯрж╛рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ, ржнрж┐ржбрж┐ржУрж░ рж╢рзБрж░рзБрждрзЗ ржлрзЗрж╕ ржлрзБржЯрзЗржЬ ржкрзНрж▓рзЗрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
                    # ржПржмржВ 5 рж╕рзЗржХрзЗржирзНржб ржмрж╛ face_duration ржкрж░рзНржпржирзНржд ржжрзЗржЦрж╛ржирзЛ рж╣ржЪрзНржЫрзЗ рж╢рзБржзрзБ
                    concat_cmd = (
                        f'ffmpeg -i "{full_stock_video}" -i "{face_processed}" -filter_complex '
                        f'"[1:v]setpts=PTS-STARTPTS[face];'
                        f'[0:v][face]overlay=0:0:enable=\'between(t,0,{face_duration})\''
                        f'[outv]" -map "[outv]" -an -c:v libx264 -preset fast -crf 22 '
                        f'"{final_no_audio}" -y'
                    )
                    
                    subprocess.run(concat_cmd, shell=True)
                    
                    # ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи ржпрзЗ ржПржбрж┐ржЯрж┐ржВ рж╕ржлрж▓ рж╣ржпрж╝рзЗржЫрзЗ
                    if os.path.exists(final_no_audio) and os.path.getsize(final_no_audio) > 1000:  # ржЕржирзНрждржд 1KB
                        # ржнрж┐ржбрж┐ржУрж░ ржжрзИрж░рзНржШрзНржп ржЪрзЗржХ ржХрж░рзБржи
                        try:
                            video_duration = float(
                                subprocess.check_output(
                                    f'ffprobe -i "{final_no_audio}" -show_entries format=duration -v quiet -of csv="p=0"',
                                    shell=True
                                ).decode().strip()
                            )
                            print(f"тЬЕ Final video duration: {video_duration:.2f}s, Audio duration: {short_duration:.2f}s")
                            
                            # ржпржжрж┐ ржнрж┐ржбрж┐ржУ ржжрзИрж░рзНржШрзНржп ржЕржбрж┐ржУ ржжрзИрж░рзНржШрзНржпрзЗрж░ рж╕рж╛ржерзЗ ржорзЗрж▓рзЗ ржирж╛, рждрж╛рж╣рж▓рзЗ ржЯрзНрж░рж┐ржо ржХрж░рзБржи
                            if abs(video_duration - short_duration) > 0.5:  # ржпржжрж┐ 0.5 рж╕рзЗржХрзЗржирзНржбрзЗрж░ ржмрзЗрж╢рж┐ ржкрж╛рж░рзНржержХрзНржп рж╣ржпрж╝
                                print(f"тЪая╕П Video duration mismatch, trimming to match audio")
                                trimmed_video = os.path.join(video_specific_temp, "trimmed_video.mp4")
                                trim_cmd = (
                                    f'ffmpeg -i "{final_no_audio}" -t {short_duration} '
                                    f'-c:v copy "{trimmed_video}" -y'
                                )
                                subprocess.run(trim_cmd, shell=True)
                                final_no_audio = trimmed_video
                        except Exception as e:
                            print(f"тЪая╕П Could not check video duration: {e}")
                        
                        used_video = final_no_audio
                        print(f"тЬЕ Successfully created face+stock combined video")
                    else:
                        print(f"тЪая╕П Video editing failed, falling back to stock footage only")
                        use_face_footage = False
                
                except Exception as e:
                    print(f"тЭМ Error processing face footage: {e}")
                    use_face_footage = False
        
        # ржпржжрж┐ ржлрзЗрж╕ ржлрзБржЯрзЗржЬ ржмрзНржпржмрж╣рж╛рж░ ржирж╛ ржХрж░рж╛ рж╣ржпрж╝ ржмрж╛ рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝, рждрж╛рж╣рж▓рзЗ рж╕рзНржЯрзНржпрж╛ржирзНржбрж╛рж░рзНржб ржнрж┐ржбрж┐ржУ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ
        if not use_face_footage:
            print("ЁЯОм Using only stock footage...")
            # ржнрж┐ржбрж┐ржУ рж▓рзБржк ржХрж░рзЗ ржУ ржЕржирзНржпрж╛ржирзНржп ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржПржХрж╕рж╛ржерзЗ ржХрж░рзБржи
            stock_only_video = os.path.join(video_specific_temp, "stock_only.mp4")
            
            if is_short:
                scale_filter = (
                    "scale=1080:1920:force_original_aspect_ratio=decrease,"
                    "pad=1080:1920:(ow-iw)/2:(oh-ih)/2"
                )
                stock_cmd = (
                    f'ffmpeg -stream_loop -1 -i "{used_stock_video}" -t {short_duration} '
                    f'-vf "{scale_filter}" -c:v libx264 -an -preset ultrafast -crf 22 "{stock_only_video}" -y'
                )
            else:
                stock_cmd = (
                    f'ffmpeg -stream_loop -1 -i "{used_stock_video}" -t {short_duration} '
                    f'-c:v libx264 -an -preset ultrafast -crf 22 "{stock_only_video}" -y'
                )
            
            subprocess.run(stock_cmd, shell=True)
            used_video = stock_only_video
        
        # ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб ржорж┐ржЙржЬрж┐ржХ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ - ржирждрзБржи ржкржжрзНржзрждрж┐
        bgm_file = get_random_file(BACKGROUND_MUSIC_FOLDER, (".mp3", ".wav", ".m4a", ".ogg"))
        if bgm_file:
            print(f"ЁЯО╡ Selected background music: {os.path.basename(bgm_file)}")
            
            # ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб ржорж┐ржЙржЬрж┐ржХ ржЕржбрж┐ржУ ржбрж┐ржЙрж░рзЗрж╢ржи ржЪрзЗржХ ржХрж░рзБржи
            try:
                bgm_duration = float(
                    subprocess.check_output(
                        f'ffprobe -i "{bgm_file}" -show_entries format=duration -v quiet -of csv="p=0"',
                        shell=True
                    ).decode().strip()
                )
                print(f"ЁЯО╡ Audio duration: {short_duration}s, BGM duration: {bgm_duration}s")
            except:
                bgm_duration = 0
                print("тЪая╕П Could not determine BGM duration")
            
            # ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб ржорж┐ржЙржЬрж┐ржХ рж▓рзБржкрж┐ржВ - ржЕржбрж┐ржУ ржжрзИрж░рзНржШрзНржп ржарж┐ржХржоржд рж╕рзЗржЯ ржХрж░рж╛
            looped_bgm = os.path.join(video_specific_temp, "looped_bgm.mp3")
            loop_cmd = f'ffmpeg -stream_loop -1 -i "{bgm_file}" -t {short_duration} -c:a copy "{looped_bgm}" -y'
            subprocess.run(loop_cmd, shell=True)
            
            # ржПржмрж╛рж░ ржЙржЪрзНржЪ ржнрж▓рж┐ржЙржорзЗ ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб ржорж┐ржЙржЬрж┐ржХ ржпрзЛржЧ ржХрж░рзБржи
            mixed_audio = os.path.join(video_specific_temp, "bgm_mixed_audio.m4a")
            print(f"ЁЯОЪя╕П Mixing audio with higher BGM volume (0.5 or 50%)")
            
            mix_cmd = (
                f'ffmpeg -i "{main_audio}" -i "{looped_bgm}" -filter_complex '
                f'"[0:a]volume=1.5[speech];'
                f'[1:a]volume=0.3[music];'  # ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб ржнрж▓рж┐ржЙржо ржЖрж░ржУ ржХржорж╛рждрзЗ
                f'[speech][music]amix=inputs=2:duration=first:weights=7 1:dropout_transition=5" '  # ржнржпрж╝рзЗрж╕рзЗрж░ ржУржЬржи ржмрж╛ржбрж╝рж╛рждрзЗ
                f'-c:a aac -b:a 320k "{mixed_audio}" -y'  # ржмрж┐ржЯрж░рзЗржЯ ржмрж╛ржбрж╝рж╛рж▓рж╛ржо
            )
            
            subprocess.run(mix_cmd, shell=True)
            
            # ржорж┐ржХрзНрж╕рж┐ржВ ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи
            if os.path.exists(mixed_audio) and os.path.getsize(mixed_audio) > 1000:
                final_audio = mixed_audio
                
                # ржорж┐ржХрзНрж╕ржб ржЕржбрж┐ржУ ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи
                try:
                    mixed_duration = float(
                        subprocess.check_output(
                            f'ffprobe -i "{mixed_audio}" -show_entries format=duration -v quiet -of csv="p=0"',
                            shell=True
                        ).decode().strip()
                    )
                    print(f"тЬЕ Successfully mixed audio with BGM: {mixed_duration}s")
                except:
                    print("тЪая╕П Could not verify mixed audio duration")
            else:
                print("тЪая╕П Failed to mix with BGM, using original audio")
                final_audio = main_audio
        else:
            print("тЪая╕П No background music found, using original audio")
            final_audio = main_audio
        
        # рж╕рж╛ржмржЯрж╛ржЗржЯрзЗрж▓ рждрзИрж░рж┐ ржХрж░рзБржи - ржкрзНрж░рждрж┐ржЯрж┐ ржнрж┐ржбрж┐ржУрж░ ржЬржирзНржп ржЖрж▓рж╛ржжрж╛ ржЗржЙржирж┐ржХ ржлрж╛ржЗрж▓ржирж╛ржо ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
        unique_subtitle_id = f"{sanitized_folder_name}_{int(time.time())}"
        temp_subtitle_ass = os.path.join(video_specific_temp, f"subtitles_{unique_subtitle_id}.ass")
        
        if use_ai_voice:
            # AI ржнржпрж╝рзЗрж╕рзЗрж░ ржЬржирзНржп рж╕рж╛ржмржЯрж╛ржЗржЯрзЗрж▓ рждрзИрж░рж┐ ржХрж░рзБржи
            if use_karaoke:
                generate_subtitles_karaoke_chunked(final_audio, temp_subtitle_ass, model, words_per_line=5)
            else:
                # ржЗржЙржирж┐ржХ ржирж╛ржо ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
                temp_subtitle_srt = os.path.join(video_specific_temp, f"subtitles_{unique_subtitle_id}.srt")
                generate_subtitles(final_audio, temp_subtitle_srt, subtitle_format='srt')
                convert_srt_to_ass(temp_subtitle_srt, temp_subtitle_ass, is_short=is_short, position=random.choice(['top', 'bottom', 'left', 'right', 'center']))
        else:
            # ржирж░ржорж╛рж▓ ржЕржбрж┐ржУрж░ ржЬржирзНржп рж╕рж╛ржмржЯрж╛ржЗржЯрзЗрж▓ рждрзИрж░рж┐ ржХрж░рзБржи
            if use_karaoke:
                generate_subtitles_karaoke_chunked(final_audio, temp_subtitle_ass, model, words_per_line=5)
            else:
                # ржЗржЙржирж┐ржХ ржирж╛ржо ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
                temp_subtitle_srt = os.path.join(video_specific_temp, f"subtitles_{unique_subtitle_id}.srt")
                generate_subtitles(final_audio, temp_subtitle_srt, subtitle_format='srt')
                convert_srt_to_ass(temp_subtitle_srt, temp_subtitle_ass, is_short=is_short, position=random.choice(['top', 'bottom', 'left', 'right', 'center']))

        # ржнрж┐ржбрж┐ржУ, ржЕржбрж┐ржУ ржПржмржВ рж╕рж╛ржмржЯрж╛ржЗржЯрзЗрж▓ ржПржХрждрзНрж░рж┐ржд ржХрж░рзБржи
        subtitle_path = os.path.abspath(temp_subtitle_ass).replace("\\", "/").replace(":", "\\:")
        
        print(f"ЁЯФК Final audio path: {final_audio}")
        print(f"ЁЯОе Using video: {used_video}")
        print(f"ЁЯУД Using subtitle: {subtitle_path}")
        
        merge_cmd = (
            f'ffmpeg -i "{used_video}" -i "{final_audio}" '
            f'-map 0:v -map 1:a '
            f'-vf "drawbox=x=0:y=0:w=iw:h=ih:color=black@0.5:t=fill,ass=\'{subtitle_path}\'" '
            f'-c:v libx264 -c:a aac -b:a 256k -preset fast -crf 18 -r 30 "{output_video}" -y'
        )
        
        print(f"ЁЯУЭ Running final merge command...")
        subprocess.run(merge_cmd, shell=True)

        # ржлрж╛ржЗржирж╛рж▓ ржнрж┐ржбрж┐ржУ ржлрж╛ржЗрж▓ ржирж╛ржо рждрзИрж░рж┐ ржХрж░рзБржи
        final_video_path = os.path.join(video_folder, f"{sanitized_folder_name}.mp4")
        
        # ржЖржЙржЯржкрзБржЯ ржнрж┐ржбрж┐ржУ ржерзЗржХрзЗ ржлрж╛ржЗржирж╛рж▓ ржнрж┐ржбрж┐ржУ ржкрж╛ржерзЗ ржорзБржн ржХрж░рзБржи
        os.rename(output_video, final_video_path)
        
        # ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи ржлрж╛ржЗржирж╛рж▓ ржнрж┐ржбрж┐ржУрждрзЗ ржЕржбрж┐ржУ ржЖржЫрзЗ ржХрж┐ржирж╛
        try:
            audio_check_cmd = f'ffprobe -i "{final_video_path}" -show_streams -select_streams a -loglevel error'
            audio_result = subprocess.run(audio_check_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            
            if audio_result.stdout.strip():
                print(f"тЬЕ Final video has audio track: {final_video_path}")
            else:
                print(f"тЪая╕П WARNING: Final video may not have audio track: {final_video_path}")
        except Exception as e:
            print(f"тЪая╕П Could not check final video audio: {e}")
            
        print(f"тЬЕ Final Video Created: {final_video_path}")
        
        # ржЯрзЗржХрзНрж╕ржЯ ржЖржЙржЯржкрзБржЯ ржлрж╛ржЗрж▓ рждрзИрж░рж┐ ржХрж░рзБржи
        # Whisper ржПрж░ ржорж╛ржзрзНржпржорзЗ ржЕржбрж┐ржУ ржерзЗржХрзЗ ржЯрзНрж░рж╛ржирзНрж╕ржХрзНрж░рж┐ржкрзНржЯ ржХрж░рж╛
        transcribe = transcribe_audio(audio_file)
        if transcribe:
            # ржнрж┐ржбрж┐ржУ ржЯрж╛ржЗржЯрзЗрж▓ ржЕржирзБржпрж╛ржпрж╝рзА ржЖржЙржЯржкрзБржЯ ржлрж╛ржЗрж▓ ржирж╛ржо рждрзИрж░рж┐ ржХрж░рж╛
            output_text_path = os.path.join(video_folder, f"{sanitized_folder_name}_output.txt")
            # Azure OpenAI API ржжрж┐ржпрж╝рзЗ ржЖржЙржЯржкрзБржЯ рждрзИрж░рж┐ ржХрж░рж╛
            generate_output_from_azure(transcribe, original_folder_name, output_text_path)
        
        # ржнрж┐ржбрж┐ржУ рждрзИрж░рж┐ рж╢рзЗрж╖рзЗ ржорзЗржЯрж╛ржбрзЗржЯрж╛ ржЖржкржбрзЗржЯ ржХрж░рждрзЗ ржХрж▓ ржХрж░рзБржи
        if process_video_metadata(final_video_path):
            print("Metadata update was successful.")
        else:
            print("тЭМ Failed to update metadata.")
        
        print(f"тЬЕ Video and text saved to: {video_folder}")

        # AI ржнржпрж╝рзЗрж╕ ржлрж╛ржЗрж▓ ржбрж┐рж▓рж┐ржЯ ржХрж░рзБржи (ржРржЪрзНржЫрж┐ржХ)
        if use_ai_voice and final_audio != audio_file and os.path.exists(final_audio):
            os.remove(final_audio)
            print(f"ЁЯЧСя╕П Deleted AI voice file: {final_audio}")
            
        # рж╕ржмрж╢рзЗрж╖рзЗ ржнрж┐ржбрж┐ржУ-рж╕рзНржкрзЗрж╕рж┐ржлрж┐ржХ ржЯрзЗржорзНржк ржлрзЛрж▓рзНржбрж╛рж░ ржбрж┐рж▓рж┐ржЯ ржХрж░рзБржи
        try:
            shutil.rmtree(video_specific_temp)
            print(f"ЁЯЧСя╕П Cleaned up temporary folder: {video_specific_temp}")
        except Exception as e:
            print(f"тЪая╕П Could not clean up temp folder: {e}")

        return True  # Return True if video creation is successful

    except Exception as e:
        print(f"тЭМ Error creating video for {audio_file}: {e}")
        print(f"тЪая╕П Full error message: {e}")  # рждрзНрж░рзБржЯрж┐рж░ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрж╛рж░рзНрждрж╛ ржжрзЗржЦрж╛ржУ
        print("тЪая╕П Skipping this audio and moving to the next one...")
        return False

def process_audio_in_parallel(audio_file, is_short=False, prefix='', suffix='', use_ai_voice=False, use_face_footage=False):
    """ржПржХржЯрж┐ ржЕржбрж┐ржУ ржлрж╛ржЗрж▓ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рзЗ (ржирж░ржорж╛рж▓ ржмрж╛ рж╢рж░рзНржЯрж╕) ржкрзНржпрж╛рж░рж╛рж▓рзЗрж▓ ржерзНрж░рзЗржбрзЗ ржЪрж╛рж▓рж╛ржпрж╝ред"""
    try:
        audio_name = os.path.splitext(os.path.basename(audio_file))[0]
        audio_temp_folder = os.path.join(TEMP_FOLDER, audio_name)
        os.makedirs(audio_temp_folder, exist_ok=True)
        output_video = get_output_filename(audio_file, is_short, prefix, suffix)
        
        # AI ржнржпрж╝рзЗрж╕рзЗрж░ ржЬржирзНржп ржЙржирзНржиржд ржЪрж╛ржВржХ-ржнрж┐рждрзНрждрж┐ржХ ржЯрзНрж░рж╛ржирзНрж╕ржХрзНрж░рж┐ржкрж╢ржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
        if use_ai_voice:
            print("ЁЯОЩя╕П Using enhanced chunked transcription for AI voice generation...")
            
            # рж╢рж░рзНржЯрж╕ ржнрж┐ржбрж┐ржУ ржПржмржВ рж▓ржВ ржнрж┐ржбрж┐ржУ ржЙржнржпрж╝рзЗрж░ ржЬржирзНржп ржПржХржЗ ржЙржирзНржиржд ржкржжрзНржзрждрж┐
            ai_voice_file = process_long_audio_with_chunked_transcription(audio_file, audio_temp_folder)
            
            if ai_voice_file and os.path.exists(ai_voice_file):
                print(f"тЬЕ AI voice generation successful using chunked transcription")
                final_audio = ai_voice_file
            else:
                print("тЭМ AI voice generation failed, using original audio")
                # ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб ржорж┐ржЙржЬрж┐ржХ рж░рж┐ржорзБржн ржХрж░рзБржи
                filtered_audio = os.path.join(audio_temp_folder, f"{audio_name}_filtered.wav")
                remove_background_music(audio_file, filtered_audio, audio_temp_folder)
                final_audio = filtered_audio
                
        else:
            # рж░рзЗржЧрзБрж▓рж╛рж░ ржнржпрж╝рзЗрж╕рзЗрж░ ржЬржирзНржп (ржкрзБрж░рж╛ржирзЛ ржкржжрзНржзрждрж┐)
            # рж╢рж░рзНржЯрж╕ ржнрж┐ржбрж┐ржУржЧрзБрж▓рзЛрж░ ржЬржирзНржп рж╕рж░рж╛рж╕рж░рж┐ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рзБржи
            if is_short:
                filtered_audio = os.path.join(audio_temp_folder, f"{audio_name}_filtered.wav")
                remove_background_music(audio_file, filtered_audio, audio_temp_folder)
                final_audio = filtered_audio
            else:
                # рж▓ржорзНржмрж╛ ржнрж┐ржбрж┐ржУржЧрзБрж▓рзЛрж░ ржЬржирзНржп ржЪрж╛ржЩрзНржХ ржкрзНрж░рж╕рзЗрж╕ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
                print("ЁЯФД Checking if audio needs chunk processing...")
                final_audio = process_long_audio_in_chunks(audio_file, audio_temp_folder, use_ai_voice=False)
                
                if not final_audio:
                    print("тЭМ Failed to process audio in chunks, trying direct processing")
                    filtered_audio = os.path.join(audio_temp_folder, f"{audio_name}_filtered.wav")
                    remove_background_music(audio_file, filtered_audio, audio_temp_folder)
                    final_audio = filtered_audio
        
        # ржЕржбрж┐ржУ ржжрж┐ржпрж╝рзЗ ржнрж┐ржбрж┐ржУ рждрзИрж░рж┐ ржХрж░рзБржи
        success = create_video(STOCK_VIDEO, final_audio, output_video, is_short=is_short, use_karaoke=True, 
                  temp_folder=audio_temp_folder, use_ai_voice=use_ai_voice, use_face_footage=use_face_footage)

        # ржкрзНрж░рж╕рзЗрж╕рж┐ржВ рж╢рзЗрж╖рзЗ ржЕржбрж┐ржУ ржПржмржВ ржЯрзЗржорзНржк ржлрзЛрж▓рзНржбрж╛рж░ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рзБржи
        clear_audio_and_temp_folders(audio_file, TEMP_FOLDER)
        
        return success
    
    except Exception as e:
        print(f"тЭМ Error in process_audio_in_parallel: {e}")
        return False
       
def get_audio_from_old_audio():
    """old_audio ржлрзЛрж▓рзНржбрж╛рж░ ржерзЗржХрзЗ mp3, wav, ржмрж╛ m4a ржлрж╛ржЗрж▓ рж▓рзЛржб ржХрж░рзЗ ржПржмржВ рж╕рзЗржирж┐ржЯрж╛ржЗржЬ ржХрж░рзЗ"""
    if not os.path.isdir(OLD_AUDIO_FOLDER):
        return []
        
    # рж╕ржм ржЕржбрж┐ржУ ржлрж╛ржЗрж▓ рж╕ржВржЧрзНрж░рж╣ ржХрж░рзБржи
    audio_files = glob(os.path.join(OLD_AUDIO_FOLDER, "*.mp3")) + \
                 glob(os.path.join(OLD_AUDIO_FOLDER, "*.wav")) + \
                 glob(os.path.join(OLD_AUDIO_FOLDER, "*.m4a"))
                 
    sanitized_files = []
    
    # ржкрзНрж░рждрж┐ржЯрж┐ ржлрж╛ржЗрж▓рзЗрж░ ржирж╛ржо рж╕рзЗржирж┐ржЯрж╛ржЗржЬ ржХрж░рзБржи
    for file_path in audio_files:
        file_dir = os.path.dirname(file_path)
        file_name = os.path.basename(file_path)
        
        # ржлрж╛ржЗрж▓ ржирж╛ржо рж╕рзЗржирж┐ржЯрж╛ржЗржЬ ржХрж░рзБржи
        sanitized_name, original_name = sanitize_filename(file_name)
        sanitized_path = os.path.join(file_dir, sanitized_name)
        
        # ржпржжрж┐ ржлрж╛ржЗрж▓ржирж╛ржо ржкрж░рж┐ржмрж░рзНрждржи рж╣ржпрж╝рзЗ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ рж░рж┐ржирзЗржо ржХрж░рзБржи
        if sanitized_name != file_name:
            try:
                # ржлрж╛ржЗрж▓ рж░рж┐ржирзЗржо ржХрж░рзБржи
                os.rename(file_path, sanitized_path)
                print(f"тЬЕ Renamed: {file_name} -> {sanitized_name}")
                
                # ржорзНржпрж╛ржкрж┐ржВ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзБржи
                map_filename(file_path, sanitized_path)
                sanitized_files.append(sanitized_path)
            except Exception as e:
                print(f"тЭМ Error renaming file {file_name}: {e}")
                sanitized_files.append(file_path)  # ржЕрж░рж┐ржЬрж┐ржирж╛рж▓ ржлрж╛ржЗрж▓ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
        else:
            # ржлрж╛ржЗрж▓ржирж╛ржо ржкрж░рж┐ржмрж░рзНрждржи ржирж╛ рж╣рж▓рзЗржУ ржорзНржпрж╛ржкрж┐ржВ рж░рж╛ржЦрзБржи
            map_filename(file_path, file_path)
            sanitized_files.append(file_path)
                
    return sanitized_files

# def process_clone_voice_audio(audio_file, temp_folder):
#     """
#     Audio file ржерзЗржХрзЗ ржЯрзНрж░рж╛ржирзНрж╕ржХрзНрж░рж┐ржкрзНржЯ ржХрж░рзЗ ржПржмржВ ржХрзНрж▓рзЛржи ржнржпрж╝рзЗрж╕ ржЬрзЗржирж╛рж░рзЗржЯ ржХрж░рзЗред
#     """
#     audio_name = os.path.splitext(os.path.basename(audio_file))[0]
    
#     # ржЯрзНрж░рж╛ржирзНрж╕ржХрзНрж░рж┐ржкрзНржЯ ржХрж░рзБржи
#     transcript = transcribe_audio(audio_file)
    
#     if not transcript:
#         print(f"тЭМ Failed to transcribe {audio_file}")
#         return None
    
#     print(f"тЬЕ Transcription completed for {audio_name}")
    
#     # ржХрзНрж▓рзЛржи ржнржпрж╝рзЗрж╕ ржЬрзЗржирж╛рж░рзЗржЯ ржХрж░рзБржи
#     cloned_audio = generate_cloned_voice_from_transcript(
#         transcript=transcript,
#         clone_audio_folder=CLONE_AUDIO_FOLDER,
#         output_folder=temp_folder,
#         language="en"  # ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛рж░ ржЬржирзНржп
#     )
    
#     if not cloned_audio:
#         print(f"тЭМ Failed to generate cloned voice for {audio_name}")
#         return None
    
#     print(f"тЬЕ Generated cloned voice for {audio_name}")
#     return cloned_audio


def batch_process():
    """
    рж╕ржХрж▓ URL ржлрж╛ржЗрж▓ ржПржмржВ old_audio ржлрзЛрж▓рзНржбрж╛рж░рзЗрж░ ржлрж╛ржЗрж▓ржЧрзБрж▓рзЛ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рзЗред
    ржЖржкржбрзЗржЯрзЗржб: ржЖрж░ржУ ржирж┐рж░рзНржнрж░ржпрзЛржЧрзНржп ржПрж░рж░ рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ ржПржмржВ ржорж╛рж╕рзНржЯрж╛рж░ URL ржкрзНрж░рж╕рзЗрж╕рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред
    """
    # ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ ржлрзЛрж▓рзНржбрж╛рж░ ржЪрзЗржХ ржХрж░рзБржи
    print("\nЁЯФ╣ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржлрзЛрж▓рзНржбрж╛рж░ржЧрзБрж▓рзЛ ржЪрзЗржХ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ:")
    critical_folders = [
        {"path": BACKGROUND_MUSIC_FOLDER, "name": "ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб ржорж┐ржЙржЬрж┐ржХ ржлрзЛрж▓рзНржбрж╛рж░", "extensions": ["*.mp3", "*.wav"]},
        {"path": STOCK_VIDEOS_FOLDER, "name": "рж╕рзНржЯржХ ржнрж┐ржбрж┐ржУ ржлрзЛрж▓рзНржбрж╛рж░", "extensions": ["*.mp4", "*.mov"]},
        {"path": SHORTS_STOCK_VIDEOS_FOLDER, "name": "рж╢рж░рзНржЯрж╕ рж╕рзНржЯржХ ржнрж┐ржбрж┐ржУ ржлрзЛрж▓рзНржбрж╛рж░", "extensions": ["*.mp4", "*.mov"]},
        {"path": REAL_FOOTAGE_SHORTS_FOLDER, "name": "рж░рж┐ржпрж╝рзЗрж▓ ржлрзБржЯрзЗржЬ рж╢рж░рзНржЯрж╕ ржлрзЛрж▓рзНржбрж╛рж░", "extensions": ["*.mp4", "*.mov"]},
        {"path": REAL_FOOTAGE_LONG_FOLDER, "name": "рж░рж┐ржпрж╝рзЗрж▓ ржлрзБржЯрзЗржЬ рж▓ржВ ржлрзЛрж▓рзНржбрж╛рж░", "extensions": ["*.mp4", "*.mov"]}
    ]
    
    for folder_info in critical_folders:
        path = folder_info["path"]
        name = folder_info["name"]
        extensions = folder_info["extensions"]
        
        print(f"\nЁЯФН ржЪрзЗржХ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ: {name} ({path})")
        
        if not os.path.exists(path):
            print(f"тЭМ ржлрзЛрж▓рзНржбрж╛рж░ ржЦрзБржБржЬрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐: {path}")
            print(f"тЬЕ ржлрзЛрж▓рзНржбрж╛рж░ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
            os.makedirs(path, exist_ok=True)
        
        # ржлрж╛ржЗрж▓ рж╕ржВржЦрзНржпрж╛ ржЧржгржирж╛
        all_files = []
        for ext in extensions:
            all_files.extend(glob(os.path.join(path, ext)))
        
        if all_files:
            print(f"тЬЕ {len(all_files)}ржЯрж┐ ржлрж╛ржЗрж▓ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ: {[os.path.basename(f) for f in all_files[:5]]} {'...' if len(all_files) > 5 else ''}")
        else:
            print(f"тЪая╕П ржХрзЛржирзЛ ржлрж╛ржЗрж▓ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред ржлрзЛрж▓рзНржбрж╛рж░рзЗ ржлрж╛ржЗрж▓ ржпрзЛржЧ ржХрж░рзБржи: {path}")
    
    # ржЕрж╕рзНржерж╛ржпрж╝рзА ржлрзЛрж▓рзНржбрж╛рж░ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рзБржи
    clear_temp_folder()
    
    # old_audio ржлрзЛрж▓рзНржбрж╛рж░ ржерзЗржХрзЗ ржлрж╛ржЗрж▓ржЧрзБрж▓рзЛ ржирж┐ржпрж╝рзЗ ржЖрж╕рзБржи
    old_audio_files = get_audio_from_old_audio()
    
    # ржпржжрж┐ old_audio ржлрзЛрж▓рзНржбрж╛рж░рзЗ ржХрзЛржирзЛ ржлрж╛ржЗрж▓ ржерж╛ржХрзЗ
    if old_audio_files:
        print(f"\nЁЯФ╣ old_audio ржлрзЛрж▓рзНржбрж╛рж░ ржерзЗржХрзЗ {len(old_audio_files)}ржЯрж┐ ржлрж╛ржЗрж▓ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗред ржПржЧрзБрж▓рзЛ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ:")
        
        success_count = 0
        fail_count = 0
        
        for idx, audio_file in enumerate(old_audio_files, 1):
            video_title = os.path.splitext(os.path.basename(audio_file))[0]
            print(f"\nЁЯО╡ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ({idx}/{len(old_audio_files)}): {video_title}")
            
            try:
                result = process_audio_in_parallel(audio_file, is_short=False, use_ai_voice=False, use_face_footage=False)
                if result:
                    success_count += 1
                    print(f"тЬЕ рж╕ржлрж▓ржнрж╛ржмрзЗ ржнрж┐ржбрж┐ржУ рждрзИрж░рж┐ рж╣ржпрж╝рзЗржЫрзЗ: {video_title}")
                else:
                    fail_count += 1
                    print(f"тЭМ ржнрж┐ржбрж┐ржУ рждрзИрж░рж┐ ржХрж░рждрзЗ ржмрзНржпрж░рзНрже: {video_title}")
            except Exception as e:
                fail_count += 1
                print(f"тЭМ ржЕржбрж┐ржУ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рждрзЗ ржПрж░рж░: {e}")
        
        print(f"\nЁЯФ╣ old_audio ржлрзЛрж▓рзНржбрж╛рж░ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ рж╕ржорзНржкржирзНржи: {success_count}ржЯрж┐ рж╕ржлрж▓, {fail_count}ржЯрж┐ ржмрзНржпрж░рзНрже")
    
    # YouTube URL ржлрж╛ржЗрж▓ржЧрзБрж▓рзЛ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рзБржи
    else:
        print("\nЁЯФ╣ old_audio ржлрзЛрж▓рзНржбрж╛рж░рзЗ ржХрзЛржирзЛ ржлрж╛ржЗрж▓ ржирзЗржЗред YouTube URL ржлрж╛ржЗрж▓ржЧрзБрж▓рзЛ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
        
        # ржлрзЗрж╕ ржлрзБржЯрзЗржЬ ржлрж╛ржЗрж▓ рж╕ржВржЦрзНржпрж╛ ржЪрзЗржХ ржХрж░рзБржи (ржпржжрж┐ ржлрзЗрж╕ ржлрзБржЯрзЗржЬ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ рж╣ржпрж╝)
        face_file_counts = face_handler.check_face_footage_files()
        
        # ржорж╛рж╕рзНржЯрж╛рж░ URL ржкрзНрж░рж╕рзЗрж╕рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ рж╕ржм URL ржПржХрж╕рж╛ржерзЗ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рзБржи
        process_all_url_files()
    
    print("\nЁЯОЙ рж╕ржорж╕рзНржд ржнрж┐ржбрж┐ржУ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ рж╕ржорзНржкржирзНржи рж╣ржпрж╝рзЗржЫрзЗ!")
    
if __name__ == "__main__":
    print("\n" + "="*80)
    print(f"ЁЯЪА YouTube ржнрж┐ржбрж┐ржУ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ рж╕рж┐рж╕рзНржЯрзЗржо рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗ...")
    print(f"ЁЯУВ ржмрзЗрж╕ ржкрж╛рже: {BASE_PATH}")
    print("="*80 + "\n")

    print("тП│ Whisper ржоржбрзЗрж▓ рж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
    
    try:
        # ржбрж┐ржнрж╛ржЗрж╕ ржЪрзЗржХрж┐ржВ ржПржмржВ ржоржбрзЗрж▓ржХрзЗ ржбрж┐ржнрж╛ржЗрж╕рзЗ ржкрж╛ржарж╛ржирзЛ
        if torch.cuda.is_available():
            device = torch.device("cuda")
            print(f"тЬЕ CUDA ржбрж┐ржнрж╛ржЗрж╕ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ: {torch.cuda.get_device_name(0)}")
        else:
            device = torch.device("cpu")
            print(f"тЪая╕П CUDA ржбрж┐ржнрж╛ржЗрж╕ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐, CPU ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ")
        
        # Whisper ржоржбрзЗрж▓ рж▓рзЛржб ржХрж░рж╛
        model = whisper.load_model("small")
        
        # ржоржбрзЗрж▓ржХрзЗ GPU ржмрж╛ CPU рждрзЗ ржкрж╛ржарж╛ржирзЛ
        model.to(device)
        print("тЬЕ Whisper ржоржбрзЗрж▓ рж╕ржлрж▓ржнрж╛ржмрзЗ рж▓рзЛржб рж╣ржпрж╝рзЗржЫрзЗ!")
        
        # ржорзЗржЗржи ржмрзНржпрж╛ржЪ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржлрж╛ржВрж╢ржи ржХрж▓ ржХрж░рзБржи
        batch_process()
        
    except Exception as e:
        print(f"тЭМ ржкрзНрж░рзЛржЧрзНрж░рж╛ржо ржЪрж╛рж▓рж╛рждрзЗ ржПрж░рж░: {e}")
        print("ржжржпрж╝рж╛ ржХрж░рзЗ ржЪрзЗржХ ржХрж░рзБржи:")
        print("1. рж╕ржм ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ ржлрзЛрж▓рзНржбрж╛рж░ ржЖржЫрзЗ ржХрж┐ржирж╛")
        print("2. URL ржлрж╛ржЗрж▓ржЧрзБрж▓рзЛрждрзЗ рж╕ржарж┐ржХ рж▓рж┐ржВржХ ржЖржЫрзЗ ржХрж┐ржирж╛")
        print("3. ffmpeg ржарж┐ржХржорждрзЛ ржЗржирж╕рзНржЯрж▓ ржХрж░рж╛ ржЖржЫрзЗ ржХрж┐ржирж╛")
        print("4. рж╕ржм ржоржбрж┐ржЙрж▓ ржЗржирж╕рзНржЯрж▓ ржХрж░рж╛ ржЖржЫрзЗ ржХрж┐ржирж╛ (pip install -r requirements.txt)")
    
    finally:
        print("\nЁЯз╣ ржХрж┐ржЫрзБ ржЕрж╕рзНржерж╛ржпрж╝рзА ржлрж╛ржЗрж▓ ржерж╛ржХрж▓рзЗ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
        try:
            clear_temp_folder()
            print("тЬЕ ржЕрж╕рзНржерж╛ржпрж╝рзА ржлрзЛрж▓рзНржбрж╛рж░ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ")
        except:
            pass
        
        print("\nЁЯСЛ ржкрзНрж░рзЛржЧрзНрж░рж╛ржо рж╢рзЗрж╖ рж╣ржпрж╝рзЗржЫрзЗред")